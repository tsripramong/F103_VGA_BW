
F103_VGAmono.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005da8  08005da8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da8  08005da8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d68  20000084  08005e34  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003dec  08005e34  00023dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf8c  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201e  00000000  00000000  0002c039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0002e058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018932  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd56  00000000  00000000  0004830a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc51  00000000  00000000  00056060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  000e1d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005494 	.word	0x08005494

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005494 	.word	0x08005494

0800014c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//uint32_t arr = 16182;
uint32_t arr = 16183;
char tmp[32];
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800015c:	d105      	bne.n	800016a <HAL_GPIO_EXTI_Callback+0x1e>
		arr-=1;
 800015e:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	3b01      	subs	r3, #1
 8000164:	4a12      	ldr	r2, [pc, #72]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000166:	6013      	str	r3, [r2, #0]
 8000168:	e008      	b.n	800017c <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if(GPIO_Pin==GPIO_PIN_9){
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000170:	d104      	bne.n	800017c <HAL_GPIO_EXTI_Callback+0x30>
		arr+=1;
 8000172:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	3301      	adds	r3, #1
 8000178:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 800017a:	6013      	str	r3, [r2, #0]
	}
	//Horizontal Line adjustment
	TIM4->ARR = arr;
 800017c:	4a0d      	ldr	r2, [pc, #52]	; (80001b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	62d3      	str	r3, [r2, #44]	; 0x2c
	sprintf(tmp,"%ld ",arr);
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	461a      	mov	r2, r3
 800018a:	490b      	ldr	r1, [pc, #44]	; (80001b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 800018c:	480b      	ldr	r0, [pc, #44]	; (80001bc <HAL_GPIO_EXTI_Callback+0x70>)
 800018e:	f003 ffb3 	bl	80040f8 <siprintf>
	  SetCursor(3,50);
 8000192:	2132      	movs	r1, #50	; 0x32
 8000194:	2003      	movs	r0, #3
 8000196:	f001 f997 	bl	80014c8 <SetCursor>
	  WriteString(tmp,Font_7x10,VGA_WHITE);
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <HAL_GPIO_EXTI_Callback+0x74>)
 800019c:	2301      	movs	r3, #1
 800019e:	ca06      	ldmia	r2, {r1, r2}
 80001a0:	4806      	ldr	r0, [pc, #24]	; (80001bc <HAL_GPIO_EXTI_Callback+0x70>)
 80001a2:	f001 f96b 	bl	800147c <WriteString>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000008 	.word	0x20000008
 80001b4:	40000800 	.word	0x40000800
 80001b8:	080054ac 	.word	0x080054ac
 80001bc:	20000218 	.word	0x20000218
 80001c0:	20000010 	.word	0x20000010

080001c4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d105      	bne.n	80001e0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		line=0;
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	801a      	strh	r2, [r3, #0]
		firstTrig=1;
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80001dc:	2201      	movs	r2, #1
 80001de:	801a      	strh	r2, [r3, #0]
	}
	if(htim==&htim4){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d111      	bne.n	800020c <HAL_TIM_PeriodElapsedCallback+0x48>
		if(firstTrig){
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d003      	beq.n	80001f8 <HAL_TIM_PeriodElapsedCallback+0x34>
			firstTrig=0;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	801a      	strh	r2, [r3, #0]
		}else{
		if(line==0)
		  HAL_SPI_Transmit_DMA(&hspi1,VGA_obuffer[0],256);
		}
	}
}
 80001f6:	e009      	b.n	800020c <HAL_TIM_PeriodElapsedCallback+0x48>
		if(line==0)
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80001fa:	881b      	ldrh	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d105      	bne.n	800020c <HAL_TIM_PeriodElapsedCallback+0x48>
		  HAL_SPI_Transmit_DMA(&hspi1,VGA_obuffer[0],256);
 8000200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000204:	4907      	ldr	r1, [pc, #28]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000208:	f002 fc52 	bl	8002ab0 <HAL_SPI_Transmit_DMA>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000184 	.word	0x20000184
 8000218:	20000214 	.word	0x20000214
 800021c:	20000000 	.word	0x20000000
 8000220:	200001cc 	.word	0x200001cc
 8000224:	2000023c 	.word	0x2000023c
 8000228:	200000a0 	.word	0x200000a0

0800022c <HAL_SPI_TxHalfCpltCallback>:

void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
     //fill in line1
	memcpy((uint8_t *)VGA_obuffer + vga_voff11,VGA_buffer[line],50);
 8000234:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <HAL_SPI_TxHalfCpltCallback+0xc0>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <HAL_SPI_TxHalfCpltCallback+0xc4>)
 800023c:	18d0      	adds	r0, r2, r3
 800023e:	4b2d      	ldr	r3, [pc, #180]	; (80002f4 <HAL_SPI_TxHalfCpltCallback+0xc8>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	461a      	mov	r2, r3
 8000244:	2332      	movs	r3, #50	; 0x32
 8000246:	fb02 f303 	mul.w	r3, r2, r3
 800024a:	4a2b      	ldr	r2, [pc, #172]	; (80002f8 <HAL_SPI_TxHalfCpltCallback+0xcc>)
 800024c:	4413      	add	r3, r2
 800024e:	2232      	movs	r2, #50	; 0x32
 8000250:	4619      	mov	r1, r3
 8000252:	f003 fefd 	bl	8004050 <memcpy>
	memcpy((uint8_t *)VGA_obuffer + vga_voff12,VGA_buffer[line],50);
 8000256:	4b29      	ldr	r3, [pc, #164]	; (80002fc <HAL_SPI_TxHalfCpltCallback+0xd0>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	4b24      	ldr	r3, [pc, #144]	; (80002f0 <HAL_SPI_TxHalfCpltCallback+0xc4>)
 800025e:	18d0      	adds	r0, r2, r3
 8000260:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <HAL_SPI_TxHalfCpltCallback+0xc8>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	461a      	mov	r2, r3
 8000266:	2332      	movs	r3, #50	; 0x32
 8000268:	fb02 f303 	mul.w	r3, r2, r3
 800026c:	4a22      	ldr	r2, [pc, #136]	; (80002f8 <HAL_SPI_TxHalfCpltCallback+0xcc>)
 800026e:	4413      	add	r3, r2
 8000270:	2232      	movs	r2, #50	; 0x32
 8000272:	4619      	mov	r1, r3
 8000274:	f003 feec 	bl	8004050 <memcpy>
	line++;
 8000278:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <HAL_SPI_TxHalfCpltCallback+0xc8>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	b29a      	uxth	r2, r3
 8000280:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <HAL_SPI_TxHalfCpltCallback+0xc8>)
 8000282:	801a      	strh	r2, [r3, #0]
	if(line==VGA_VBUFFER){
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <HAL_SPI_TxHalfCpltCallback+0xc8>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800028c:	d12a      	bne.n	80002e4 <HAL_SPI_TxHalfCpltCallback+0xb8>
		memset((uint8_t *)VGA_obuffer+vga_voff21,0x0,50);
 800028e:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <HAL_SPI_TxHalfCpltCallback+0xd4>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <HAL_SPI_TxHalfCpltCallback+0xc4>)
 8000296:	4413      	add	r3, r2
 8000298:	2232      	movs	r2, #50	; 0x32
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f003 fee5 	bl	800406c <memset>
		memset((uint8_t *)VGA_obuffer+vga_voff22,0x0,50);
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <HAL_SPI_TxHalfCpltCallback+0xd8>)
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <HAL_SPI_TxHalfCpltCallback+0xc4>)
 80002aa:	4413      	add	r3, r2
 80002ac:	2232      	movs	r2, #50	; 0x32
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fedb 	bl	800406c <memset>
		memset((uint8_t *)VGA_obuffer+vga_voff11,0x0,50);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <HAL_SPI_TxHalfCpltCallback+0xc0>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <HAL_SPI_TxHalfCpltCallback+0xc4>)
 80002be:	4413      	add	r3, r2
 80002c0:	2232      	movs	r2, #50	; 0x32
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 fed1 	bl	800406c <memset>
		memset((uint8_t *)VGA_obuffer+vga_voff12,0x0,50);
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <HAL_SPI_TxHalfCpltCallback+0xd0>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <HAL_SPI_TxHalfCpltCallback+0xc4>)
 80002d2:	4413      	add	r3, r2
 80002d4:	2232      	movs	r2, #50	; 0x32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f003 fec7 	bl	800406c <memset>
		HAL_SPI_DMAStop(&hspi1);
 80002de:	480a      	ldr	r0, [pc, #40]	; (8000308 <HAL_SPI_TxHalfCpltCallback+0xdc>)
 80002e0:	f002 fc9c 	bl	8002c1c <HAL_SPI_DMAStop>
	}
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000216 	.word	0x20000216
 80002f0:	2000023c 	.word	0x2000023c
 80002f4:	20000214 	.word	0x20000214
 80002f8:	2000033c 	.word	0x2000033c
 80002fc:	20000002 	.word	0x20000002
 8000300:	20000004 	.word	0x20000004
 8000304:	20000006 	.word	0x20000006
 8000308:	200000a0 	.word	0x200000a0

0800030c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	memcpy((uint8_t *)VGA_obuffer + vga_voff21,VGA_buffer[line],50);
 8000314:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <HAL_SPI_TxCpltCallback+0xc0>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <HAL_SPI_TxCpltCallback+0xc4>)
 800031c:	18d0      	adds	r0, r2, r3
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <HAL_SPI_TxCpltCallback+0xc8>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	461a      	mov	r2, r3
 8000324:	2332      	movs	r3, #50	; 0x32
 8000326:	fb02 f303 	mul.w	r3, r2, r3
 800032a:	4a2b      	ldr	r2, [pc, #172]	; (80003d8 <HAL_SPI_TxCpltCallback+0xcc>)
 800032c:	4413      	add	r3, r2
 800032e:	2232      	movs	r2, #50	; 0x32
 8000330:	4619      	mov	r1, r3
 8000332:	f003 fe8d 	bl	8004050 <memcpy>
	memcpy((uint8_t *)VGA_obuffer + vga_voff22,VGA_buffer[line],50);
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <HAL_SPI_TxCpltCallback+0xd0>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	461a      	mov	r2, r3
 800033c:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <HAL_SPI_TxCpltCallback+0xc4>)
 800033e:	18d0      	adds	r0, r2, r3
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <HAL_SPI_TxCpltCallback+0xc8>)
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	2332      	movs	r3, #50	; 0x32
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <HAL_SPI_TxCpltCallback+0xcc>)
 800034e:	4413      	add	r3, r2
 8000350:	2232      	movs	r2, #50	; 0x32
 8000352:	4619      	mov	r1, r3
 8000354:	f003 fe7c 	bl	8004050 <memcpy>
	line++;
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <HAL_SPI_TxCpltCallback+0xc8>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <HAL_SPI_TxCpltCallback+0xc8>)
 8000362:	801a      	strh	r2, [r3, #0]
	if(line==VGA_VBUFFER){
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <HAL_SPI_TxCpltCallback+0xc8>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800036c:	d12a      	bne.n	80003c4 <HAL_SPI_TxCpltCallback+0xb8>
		memset((uint8_t *)VGA_obuffer+vga_voff11,0x0,50);
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <HAL_SPI_TxCpltCallback+0xd4>)
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <HAL_SPI_TxCpltCallback+0xc4>)
 8000376:	4413      	add	r3, r2
 8000378:	2232      	movs	r2, #50	; 0x32
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f003 fe75 	bl	800406c <memset>
		memset((uint8_t *)VGA_obuffer+vga_voff12,0x0,50);
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <HAL_SPI_TxCpltCallback+0xd8>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <HAL_SPI_TxCpltCallback+0xc4>)
 800038a:	4413      	add	r3, r2
 800038c:	2232      	movs	r2, #50	; 0x32
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fe6b 	bl	800406c <memset>
		memset((uint8_t *)VGA_obuffer+vga_voff21,0x0,50);
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <HAL_SPI_TxCpltCallback+0xc0>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	461a      	mov	r2, r3
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <HAL_SPI_TxCpltCallback+0xc4>)
 800039e:	4413      	add	r3, r2
 80003a0:	2232      	movs	r2, #50	; 0x32
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f003 fe61 	bl	800406c <memset>
		memset((uint8_t *)VGA_obuffer+vga_voff22,0x0,50);
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_SPI_TxCpltCallback+0xd0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <HAL_SPI_TxCpltCallback+0xc4>)
 80003b2:	4413      	add	r3, r2
 80003b4:	2232      	movs	r2, #50	; 0x32
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 fe57 	bl	800406c <memset>
//stop DMA
		HAL_SPI_DMAStop(&hspi1);
 80003be:	480a      	ldr	r0, [pc, #40]	; (80003e8 <HAL_SPI_TxCpltCallback+0xdc>)
 80003c0:	f002 fc2c 	bl	8002c1c <HAL_SPI_DMAStop>
	}
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000004 	.word	0x20000004
 80003d0:	2000023c 	.word	0x2000023c
 80003d4:	20000214 	.word	0x20000214
 80003d8:	2000033c 	.word	0x2000033c
 80003dc:	20000006 	.word	0x20000006
 80003e0:	20000216 	.word	0x20000216
 80003e4:	20000002 	.word	0x20000002
 80003e8:	200000a0 	.word	0x200000a0

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	; 0x40
 80003f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f001 f981 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f8df 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 fb1d 	bl	8000a38 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fe:	f000 fafd 	bl	80009fc <MX_DMA_Init>
  MX_TIM1_Init();
 8000402:	f000 f955 	bl	80006b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000406:	f000 f9f3 	bl	80007f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800040a:	f000 f91b 	bl	8000644 <MX_SPI1_Init>
  MX_TIM4_Init();
 800040e:	f000 fa67 	bl	80008e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000412:	4862      	ldr	r0, [pc, #392]	; (800059c <main+0x1b0>)
 8000414:	f002 fdc2 	bl	8002f9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000418:	2100      	movs	r1, #0
 800041a:	4860      	ldr	r0, [pc, #384]	; (800059c <main+0x1b0>)
 800041c:	f002 fe68 	bl	80030f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000420:	2104      	movs	r1, #4
 8000422:	485e      	ldr	r0, [pc, #376]	; (800059c <main+0x1b0>)
 8000424:	f002 fe64 	bl	80030f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000428:	2108      	movs	r1, #8
 800042a:	485c      	ldr	r0, [pc, #368]	; (800059c <main+0x1b0>)
 800042c:	f002 fe60 	bl	80030f0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8000430:	485b      	ldr	r0, [pc, #364]	; (80005a0 <main+0x1b4>)
 8000432:	f002 fdb3 	bl	8002f9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000436:	2104      	movs	r1, #4
 8000438:	4859      	ldr	r0, [pc, #356]	; (80005a0 <main+0x1b4>)
 800043a:	f002 fe59 	bl	80030f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800043e:	2108      	movs	r1, #8
 8000440:	4857      	ldr	r0, [pc, #348]	; (80005a0 <main+0x1b4>)
 8000442:	f002 fe55 	bl	80030f0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8000446:	4857      	ldr	r0, [pc, #348]	; (80005a4 <main+0x1b8>)
 8000448:	f002 fda8 	bl	8002f9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800044c:	2100      	movs	r1, #0
 800044e:	4855      	ldr	r0, [pc, #340]	; (80005a4 <main+0x1b8>)
 8000450:	f002 fe4e 	bl	80030f0 <HAL_TIM_PWM_Start>

  int maxX=VGA_WIDTH-1,maxY=VGA_HEIGHT-1;
 8000454:	f240 138f 	movw	r3, #399	; 0x18f
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
 800045a:	f240 1329 	movw	r3, #297	; 0x129
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ClearScreen(VGA_BLACK);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fddb 	bl	800101c <ClearScreen>
  DrawLine(0,0,0,maxY,VGA_WHITE);
 8000466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000468:	b21b      	sxth	r3, r3
 800046a:	2201      	movs	r2, #1
 800046c:	9200      	str	r2, [sp, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	2000      	movs	r0, #0
 8000474:	f000 fe72 	bl	800115c <DrawLine>
  DrawLine(maxX,0,maxX,maxY,VGA_WHITE);
 8000478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800047a:	b218      	sxth	r0, r3
 800047c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800047e:	b21a      	sxth	r2, r3
 8000480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000482:	b21b      	sxth	r3, r3
 8000484:	2101      	movs	r1, #1
 8000486:	9100      	str	r1, [sp, #0]
 8000488:	2100      	movs	r1, #0
 800048a:	f000 fe67 	bl	800115c <DrawLine>
  DrawLine(0,maxY,maxX,maxY,VGA_WHITE);
 800048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000490:	b219      	sxth	r1, r3
 8000492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000494:	b21a      	sxth	r2, r3
 8000496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000498:	b21b      	sxth	r3, r3
 800049a:	2001      	movs	r0, #1
 800049c:	9000      	str	r0, [sp, #0]
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fe5c 	bl	800115c <DrawLine>
  DrawLine(0,0,maxX,0,VGA_WHITE);
 80004a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004a6:	b21a      	sxth	r2, r3
 80004a8:	2301      	movs	r3, #1
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2300      	movs	r3, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fe53 	bl	800115c <DrawLine>

  char msg[32]="Testing";
 80004b6:	4a3c      	ldr	r2, [pc, #240]	; (80005a8 <main+0x1bc>)
 80004b8:	463b      	mov	r3, r7
 80004ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004be:	e883 0003 	stmia.w	r3, {r0, r1}
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
  SetCursor(3,3);
 80004d4:	2103      	movs	r1, #3
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 fff6 	bl	80014c8 <SetCursor>
  WriteString(msg,Font_7x10,VGA_WHITE);
 80004dc:	4a33      	ldr	r2, [pc, #204]	; (80005ac <main+0x1c0>)
 80004de:	4638      	mov	r0, r7
 80004e0:	2301      	movs	r3, #1
 80004e2:	ca06      	ldmia	r2, {r1, r2}
 80004e4:	f000 ffca 	bl	800147c <WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int r,x,y,z=0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	637b      	str	r3, [r7, #52]	; 0x34
  while (1)
  {
	  r = rand()%50;
 80004ec:	f003 fdc6 	bl	800407c <rand>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a2f      	ldr	r2, [pc, #188]	; (80005b0 <main+0x1c4>)
 80004f4:	fb82 1203 	smull	r1, r2, r2, r3
 80004f8:	1111      	asrs	r1, r2, #4
 80004fa:	17da      	asrs	r2, r3, #31
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	2132      	movs	r1, #50	; 0x32
 8000500:	fb01 f202 	mul.w	r2, r1, r2
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
	  x = rand()%VGA_WIDTH;
 8000508:	f003 fdb8 	bl	800407c <rand>
 800050c:	4603      	mov	r3, r0
 800050e:	4a28      	ldr	r2, [pc, #160]	; (80005b0 <main+0x1c4>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	11d1      	asrs	r1, r2, #7
 8000516:	17da      	asrs	r2, r3, #31
 8000518:	1a8a      	subs	r2, r1, r2
 800051a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9b      	subs	r3, r3, r2
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
	  y = rand()%VGA_HEIGHT;
 8000526:	f003 fda9 	bl	800407c <rand>
 800052a:	4603      	mov	r3, r0
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <main+0x1c8>)
 800052e:	fb82 1203 	smull	r1, r2, r2, r3
 8000532:	1111      	asrs	r1, r2, #4
 8000534:	17da      	asrs	r2, r3, #31
 8000536:	1a8a      	subs	r2, r1, r2
 8000538:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800053c:	fb01 f202 	mul.w	r2, r1, r2
 8000540:	1a9b      	subs	r3, r3, r2
 8000542:	623b      	str	r3, [r7, #32]
	  DrawCircle(x,y,r,VGA_WHITE);
 8000544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000546:	b218      	sxth	r0, r3
 8000548:	6a3b      	ldr	r3, [r7, #32]
 800054a:	b219      	sxth	r1, r3
 800054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054e:	b21a      	sxth	r2, r3
 8000550:	2301      	movs	r3, #1
 8000552:	f000 ffcf 	bl	80014f4 <DrawCircle>
//	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	  z=z+1;
 8000556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000558:	3301      	adds	r3, #1
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
	  if(z>=100){
 800055c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800055e:	2b63      	cmp	r3, #99	; 0x63
 8000560:	dd18      	ble.n	8000594 <main+0x1a8>
		  z=0;
 8000562:	2300      	movs	r3, #0
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
		  ClearScreen(VGA_BLACK);
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fd58 	bl	800101c <ClearScreen>
		  DrawRectangle(0,0,maxX,maxY,VGA_WHITE);
 800056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800056e:	b21a      	sxth	r2, r3
 8000570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000572:	b21b      	sxth	r3, r3
 8000574:	2101      	movs	r1, #1
 8000576:	9100      	str	r1, [sp, #0]
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f001 f84e 	bl	800161c <DrawRectangle>
		  SetCursor(3,3);
 8000580:	2103      	movs	r1, #3
 8000582:	2003      	movs	r0, #3
 8000584:	f000 ffa0 	bl	80014c8 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <main+0x1c0>)
 800058a:	4638      	mov	r0, r7
 800058c:	2301      	movs	r3, #1
 800058e:	ca06      	ldmia	r2, {r1, r2}
 8000590:	f000 ff74 	bl	800147c <WriteString>
	  }
	  HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f001 f911 	bl	80017bc <HAL_Delay>
	  r = rand()%50;
 800059a:	e7a7      	b.n	80004ec <main+0x100>
 800059c:	2000013c 	.word	0x2000013c
 80005a0:	20000184 	.word	0x20000184
 80005a4:	200001cc 	.word	0x200001cc
 80005a8:	080054b4 	.word	0x080054b4
 80005ac:	20000010 	.word	0x20000010
 80005b0:	51eb851f 	.word	0x51eb851f
 80005b4:	0dbeb61f 	.word	0x0dbeb61f

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	; 0x40
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fd50 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fde9 	bl	80021d8 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800060c:	f000 fa84 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f856 	bl	80026dc <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000636:	f000 fa6f 	bl	8000b18 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3740      	adds	r7, #64	; 0x40
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_SPI1_Init+0x64>)
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <MX_SPI1_Init+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000678:	2208      	movs	r2, #8
 800067a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000690:	220a      	movs	r2, #10
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_SPI1_Init+0x64>)
 8000696:	f002 f987 	bl	80029a8 <HAL_SPI_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006a0:	f000 fa3a 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	40013000 	.word	0x40013000

080006b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fcbf 	bl	800406c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <MX_TIM1_Init+0x138>)
 80006f0:	4a3e      	ldr	r2, [pc, #248]	; (80007ec <MX_TIM1_Init+0x13c>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <MX_TIM1_Init+0x138>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_TIM1_Init+0x138>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 8000700:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_TIM1_Init+0x138>)
 8000702:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000706:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <MX_TIM1_Init+0x138>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_TIM1_Init+0x138>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000714:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <MX_TIM1_Init+0x138>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800071a:	4833      	ldr	r0, [pc, #204]	; (80007e8 <MX_TIM1_Init+0x138>)
 800071c:	f002 fbee 	bl	8002efc <HAL_TIM_Base_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000726:	f000 f9f7 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000734:	4619      	mov	r1, r3
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <MX_TIM1_Init+0x138>)
 8000738:	f002 ff42 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000742:	f000 f9e9 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000746:	4828      	ldr	r0, [pc, #160]	; (80007e8 <MX_TIM1_Init+0x138>)
 8000748:	f002 fc7a 	bl	8003040 <HAL_TIM_PWM_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000752:	f000 f9e1 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000756:	2320      	movs	r3, #32
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000762:	4619      	mov	r1, r3
 8000764:	4820      	ldr	r0, [pc, #128]	; (80007e8 <MX_TIM1_Init+0x138>)
 8000766:	f003 fb87 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000770:	f000 f9d2 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000774:	2370      	movs	r3, #112	; 0x70
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 72;
 8000778:	2348      	movs	r3, #72	; 0x48
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800077c:	2302      	movs	r3, #2
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <MX_TIM1_Init+0x138>)
 800079a:	f002 fe53 	bl	8003444 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007a4:	f000 f9b8 	bl	8000b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM1_Init+0x138>)
 80007cc:	f003 fbb2 	bl	8003f34 <HAL_TIMEx_ConfigBreakDeadTime>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80007d6:	f000 f99f 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <MX_TIM1_Init+0x138>)
 80007dc:	f000 fa92 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 80007e0:	bf00      	nop
 80007e2:	3758      	adds	r7, #88	; 0x58
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000013c 	.word	0x2000013c
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_TIM2_Init+0xec>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_TIM2_Init+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_TIM2_Init+0xec>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_TIM2_Init+0xec>)
 8000838:	f44f 721c 	mov.w	r2, #624	; 0x270
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_TIM2_Init+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_TIM2_Init+0xec>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4824      	ldr	r0, [pc, #144]	; (80008dc <MX_TIM2_Init+0xec>)
 800084c:	f002 fb56 	bl	8002efc <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f95f 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800085a:	4820      	ldr	r0, [pc, #128]	; (80008dc <MX_TIM2_Init+0xec>)
 800085c:	f002 fbf0 	bl	8003040 <HAL_TIM_PWM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000866:	f000 f957 	bl	8000b18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800086a:	2307      	movs	r3, #7
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4818      	ldr	r0, [pc, #96]	; (80008dc <MX_TIM2_Init+0xec>)
 800087a:	f002 ff65 	bl	8003748 <HAL_TIM_SlaveConfigSynchro>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000884:	f000 f948 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000888:	2320      	movs	r3, #32
 800088a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_TIM2_Init+0xec>)
 8000898:	f003 faee 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008a2:	f000 f939 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008a6:	2370      	movs	r3, #112	; 0x70
 80008a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80008ae:	2302      	movs	r3, #2
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	2204      	movs	r2, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_TIM2_Init+0xec>)
 80008be:	f002 fdc1 	bl	8003444 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008c8:	f000 f926 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <MX_TIM2_Init+0xec>)
 80008ce:	f000 fa19 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	; 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000184 	.word	0x20000184

080008e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b092      	sub	sp, #72	; 0x48
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000920:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000922:	4a35      	ldr	r2, [pc, #212]	; (80009f8 <MX_TIM4_Init+0x118>)
 8000924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <MX_TIM4_Init+0x114>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16182;
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000934:	f643 7236 	movw	r2, #16182	; 0x3f36
 8000938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <MX_TIM4_Init+0x114>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000946:	482b      	ldr	r0, [pc, #172]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000948:	f002 fad8 	bl	8002efc <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000952:	f000 f8e1 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000960:	4619      	mov	r1, r3
 8000962:	4824      	ldr	r0, [pc, #144]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000964:	f002 fe2c 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800096e:	f000 f8d3 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000972:	4820      	ldr	r0, [pc, #128]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000974:	f002 fb64 	bl	8003040 <HAL_TIM_PWM_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800097e:	f000 f8cb 	bl	8000b18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000982:	2304      	movs	r3, #4
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000986:	2310      	movs	r3, #16
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_TIM4_Init+0x114>)
 8000992:	f002 fed9 	bl	8003748 <HAL_TIM_SlaveConfigSynchro>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 800099c:	f000 f8bc 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_TIM4_Init+0x114>)
 80009b0:	f003 fa62 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80009ba:	f000 f8ad 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009be:	2370      	movs	r3, #112	; 0x70
 80009c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 80009c2:	2363      	movs	r3, #99	; 0x63
 80009c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM4_Init+0x114>)
 80009d6:	f002 fd35 	bl	8003444 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80009e0:	f000 f89a 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM4_Init+0x114>)
 80009e6:	f000 f98d 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3748      	adds	r7, #72	; 0x48
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001cc 	.word	0x200001cc
 80009f8:	40000800 	.word	0x40000800

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_DMA_Init+0x38>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <MX_DMA_Init+0x38>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_DMA_Init+0x38>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	200d      	movs	r0, #13
 8000a20:	f000 ffc7 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a24:	200d      	movs	r0, #13
 8000a26:	f000 ffe0 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a2d      	ldr	r2, [pc, #180]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a6a:	f043 0320 	orr.w	r3, r3, #32
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0320 	and.w	r3, r3, #32
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_GPIO_Init+0xd0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab2:	4816      	ldr	r0, [pc, #88]	; (8000b0c <MX_GPIO_Init+0xd4>)
 8000ab4:	f001 fb60 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <MX_GPIO_Init+0xd4>)
 8000ad2:	f001 f9cd 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_GPIO_Init+0xd8>)
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480a      	ldr	r0, [pc, #40]	; (8000b14 <MX_GPIO_Init+0xdc>)
 8000aec:	f001 f9c0 	bl	8001e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2017      	movs	r0, #23
 8000af6:	f000 ff5c 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000afa:	2017      	movs	r0, #23
 8000afc:	f000 ff75 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_MspInit+0x60>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_MspInit+0x60>)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <HAL_SPI_MspInit+0xc0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d14a      	bne.n	8000c3e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bd8:	23a0      	movs	r3, #160	; 0xa0
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <HAL_SPI_MspInit+0xc8>)
 8000bec:	f001 f940 	bl	8001e70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000bf2:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_SPI_MspInit+0xd0>)
 8000bf4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c16:	2220      	movs	r2, #32
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000c20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c24:	f000 fefc 	bl	8001a20 <HAL_DMA_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000c2e:	f7ff ff73 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c36:	649a      	str	r2, [r3, #72]	; 0x48
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	200000f8 	.word	0x200000f8
 8000c58:	40020030 	.word	0x40020030

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <HAL_TIM_Base_MspInit+0x9c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10c      	bne.n	8000c88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c86:	e032      	b.n	8000cee <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d114      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	201c      	movs	r0, #28
 8000cb0:	f000 fe7f 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb4:	201c      	movs	r0, #28
 8000cb6:	f000 fe98 	bl	80019ea <HAL_NVIC_EnableIRQ>
}
 8000cba:	e018      	b.n	8000cee <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_TIM_Base_MspInit+0xa4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d113      	bne.n	8000cee <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_TIM_Base_MspInit+0xa0>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	201e      	movs	r0, #30
 8000ce4:	f000 fe65 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ce8:	201e      	movs	r0, #30
 8000cea:	f000 fe7e 	bl	80019ea <HAL_NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40012c00 	.word	0x40012c00
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40000800 	.word	0x40000800

08000d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <HAL_TIM_MspPostInit+0xd4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d119      	bne.n	8000d58 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4823      	ldr	r0, [pc, #140]	; (8000de0 <HAL_TIM_MspPostInit+0xdc>)
 8000d52:	f001 f88d 	bl	8001e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d56:	e03a      	b.n	8000dce <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d60:	d118      	bne.n	8000d94 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6193      	str	r3, [r2, #24]
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2302      	movs	r3, #2
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <HAL_TIM_MspPostInit+0xdc>)
 8000d8e:	f001 f86f 	bl	8001e70 <HAL_GPIO_Init>
}
 8000d92:	e01c      	b.n	8000dce <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <HAL_TIM_MspPostInit+0xe0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d117      	bne.n	8000dce <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_TIM_MspPostInit+0xd8>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <HAL_TIM_MspPostInit+0xe4>)
 8000dca:	f001 f851 	bl	8001e70 <HAL_GPIO_Init>
}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40000800 	.word	0x40000800
 8000de8:	40010c00 	.word	0x40010c00

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 fca7 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA1_Channel3_IRQHandler+0x10>)
 8000e42:	f000 fee1 	bl	8001c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000f8 	.word	0x200000f8

08000e50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e58:	f001 f9a6 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000e5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e60:	f001 f9a2 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM2_IRQHandler+0x10>)
 8000e6e:	f002 f9e1 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000184 	.word	0x20000184

08000e7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM4_IRQHandler+0x10>)
 8000e82:	f002 f9d7 	bl	8003234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001cc 	.word	0x200001cc

08000e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	return 1;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <_kill>:

int _kill(int pid, int sig)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ea8:	f003 f8a8 	bl	8003ffc <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2216      	movs	r2, #22
 8000eb0:	601a      	str	r2, [r3, #0]
	return -1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_exit>:

void _exit (int status)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffe7 	bl	8000e9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ed0:	e7fe      	b.n	8000ed0 <_exit+0x12>

08000ed2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e00a      	b.n	8000efa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	4601      	mov	r1, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	60ba      	str	r2, [r7, #8]
 8000ef0:	b2ca      	uxtb	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbf0      	blt.n	8000ee4 <_read+0x12>
	}

return len;
 8000f02:	687b      	ldr	r3, [r7, #4]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e009      	b.n	8000f32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	60ba      	str	r2, [r7, #8]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dbf1      	blt.n	8000f1e <_write+0x12>
	}
	return len;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_close>:

int _close(int file)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <_isatty>:

int _isatty(int file)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f003 f812 	bl	8003ffc <__errno>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20005000 	.word	0x20005000
 8001004:	00000400 	.word	0x00000400
 8001008:	20000238 	.word	0x20000238
 800100c:	20003df0 	.word	0x20003df0

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <ClearScreen>:

uint8_t VGA_obuffer[4][64];
uint8_t VGA_buffer[VGA_VBUFFER][50];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	memset((uint8_t *)VGA_buffer,(color==VGA_WHITE)? 0xff:0x00,VGA_VBUFFER*50);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <ClearScreen+0x14>
 800102c:	23ff      	movs	r3, #255	; 0xff
 800102e:	e000      	b.n	8001032 <ClearScreen+0x16>
 8001030:	2300      	movs	r3, #0
 8001032:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001036:	4619      	mov	r1, r3
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <ClearScreen+0x2c>)
 800103a:	f003 f817 	bl	800406c <memset>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000033c 	.word	0x2000033c

0800104c <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 800104c:	b490      	push	{r4, r7}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	460b      	mov	r3, r1
 8001058:	80bb      	strh	r3, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db72      	blt.n	800114c <DrawPixel+0x100>
 8001066:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db6e      	blt.n	800114c <DrawPixel+0x100>
 800106e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001072:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001076:	da69      	bge.n	800114c <DrawPixel+0x100>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 8001078:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800107c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001080:	da64      	bge.n	800114c <DrawPixel+0x100>
		/* Error */
		return;
	}

	/* Set color */
	if (color == VGA_WHITE) {
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d12f      	bne.n	80010e8 <DrawPixel+0x9c>
		VGA_buffer[y][(x>>3)] |= 0x80 >> (x % 8);
 8001088:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800108c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001090:	10d2      	asrs	r2, r2, #3
 8001092:	b212      	sxth	r2, r2
 8001094:	4610      	mov	r0, r2
 8001096:	4a30      	ldr	r2, [pc, #192]	; (8001158 <DrawPixel+0x10c>)
 8001098:	2132      	movs	r1, #50	; 0x32
 800109a:	fb01 f303 	mul.w	r3, r1, r3
 800109e:	4413      	add	r3, r2
 80010a0:	4403      	add	r3, r0
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25a      	sxtb	r2, r3
 80010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010aa:	4259      	negs	r1, r3
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	f001 0107 	and.w	r1, r1, #7
 80010b4:	bf58      	it	pl
 80010b6:	424b      	negpl	r3, r1
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	410b      	asrs	r3, r1
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b259      	sxtb	r1, r3
 80010c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010ce:	10d2      	asrs	r2, r2, #3
 80010d0:	b212      	sxth	r2, r2
 80010d2:	4614      	mov	r4, r2
 80010d4:	b2c8      	uxtb	r0, r1
 80010d6:	4a20      	ldr	r2, [pc, #128]	; (8001158 <DrawPixel+0x10c>)
 80010d8:	2132      	movs	r1, #50	; 0x32
 80010da:	fb01 f303 	mul.w	r3, r1, r3
 80010de:	4413      	add	r3, r2
 80010e0:	4423      	add	r3, r4
 80010e2:	4602      	mov	r2, r0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e032      	b.n	800114e <DrawPixel+0x102>
	} else {
		VGA_buffer[y][(x>>3)] &= ~(0x80 >> (x % 8));
 80010e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010f0:	10d2      	asrs	r2, r2, #3
 80010f2:	b212      	sxth	r2, r2
 80010f4:	4610      	mov	r0, r2
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <DrawPixel+0x10c>)
 80010f8:	2132      	movs	r1, #50	; 0x32
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	4413      	add	r3, r2
 8001100:	4403      	add	r3, r0
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b25a      	sxtb	r2, r3
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	4259      	negs	r1, r3
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	f001 0107 	and.w	r1, r1, #7
 8001114:	bf58      	it	pl
 8001116:	424b      	negpl	r3, r1
 8001118:	b21b      	sxth	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	410b      	asrs	r3, r1
 8001120:	b25b      	sxtb	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	b25b      	sxtb	r3, r3
 8001126:	4013      	ands	r3, r2
 8001128:	b259      	sxtb	r1, r3
 800112a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800112e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001132:	10d2      	asrs	r2, r2, #3
 8001134:	b212      	sxth	r2, r2
 8001136:	4614      	mov	r4, r2
 8001138:	b2c8      	uxtb	r0, r1
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <DrawPixel+0x10c>)
 800113c:	2132      	movs	r1, #50	; 0x32
 800113e:	fb01 f303 	mul.w	r3, r1, r3
 8001142:	4413      	add	r3, r2
 8001144:	4423      	add	r3, r4
 8001146:	4602      	mov	r2, r0
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e000      	b.n	800114e <DrawPixel+0x102>
		return;
 800114c:	bf00      	nop
	}
}
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bc90      	pop	{r4, r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000033c 	.word	0x2000033c

0800115c <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4623      	mov	r3, r4
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	4603      	mov	r3, r0
 8001170:	80bb      	strh	r3, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	807b      	strh	r3, [r7, #2]
 8001176:	4613      	mov	r3, r2
 8001178:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 800117a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800117e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001182:	429a      	cmp	r2, r3
 8001184:	da05      	bge.n	8001192 <DrawLine+0x36>
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	b21b      	sxth	r3, r3
 8001190:	e004      	b.n	800119c <DrawLine+0x40>
 8001192:	88fa      	ldrh	r2, [r7, #6]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21b      	sxth	r3, r3
 800119c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 800119e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	da05      	bge.n	80011b6 <DrawLine+0x5a>
 80011aa:	883a      	ldrh	r2, [r7, #0]
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	e004      	b.n	80011c0 <DrawLine+0x64>
 80011b6:	88ba      	ldrh	r2, [r7, #4]
 80011b8:	883b      	ldrh	r3, [r7, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b21b      	sxth	r3, r3
 80011c0:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 80011c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	da01      	bge.n	80011d2 <DrawLine+0x76>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e001      	b.n	80011d6 <DrawLine+0x7a>
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 80011d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	da01      	bge.n	80011e8 <DrawLine+0x8c>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e001      	b.n	80011ec <DrawLine+0x90>
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 80011ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dd06      	ble.n	8001208 <DrawLine+0xac>
 80011fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011fe:	0fda      	lsrs	r2, r3, #31
 8001200:	4413      	add	r3, r2
 8001202:	105b      	asrs	r3, r3, #1
 8001204:	b21b      	sxth	r3, r3
 8001206:	e006      	b.n	8001216 <DrawLine+0xba>
 8001208:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800120c:	0fda      	lsrs	r2, r3, #31
 800120e:	4413      	add	r3, r2
 8001210:	105b      	asrs	r3, r3, #1
 8001212:	425b      	negs	r3, r3
 8001214:	b21b      	sxth	r3, r3
 8001216:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001218:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d130      	bne.n	8001282 <DrawLine+0x126>
		if (y1 < y0) {
 8001220:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001224:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	da05      	bge.n	8001238 <DrawLine+0xdc>
			tmp = y1;
 800122c:	883b      	ldrh	r3, [r7, #0]
 800122e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001234:	893b      	ldrh	r3, [r7, #8]
 8001236:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001238:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800123c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001240:	429a      	cmp	r2, r3
 8001242:	da05      	bge.n	8001250 <DrawLine+0xf4>
			tmp = x1;
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800124c:	893b      	ldrh	r3, [r7, #8]
 800124e:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	82bb      	strh	r3, [r7, #20]
 8001254:	e00e      	b.n	8001274 <DrawLine+0x118>
			DrawPixel(x0, i, c);
 8001256:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800125a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fef2 	bl	800104c <DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800126c:	b29b      	uxth	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	b29b      	uxth	r3, r3
 8001272:	82bb      	strh	r3, [r7, #20]
 8001274:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001278:	f9b7 3000 	ldrsh.w	r3, [r7]
 800127c:	429a      	cmp	r2, r3
 800127e:	ddea      	ble.n	8001256 <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8001280:	e06e      	b.n	8001360 <DrawLine+0x204>
	}

	if (dy == 0) {
 8001282:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d130      	bne.n	80012ec <DrawLine+0x190>
		if (y1 < y0) {
 800128a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800128e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	da05      	bge.n	80012a2 <DrawLine+0x146>
			tmp = y1;
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800129e:	893b      	ldrh	r3, [r7, #8]
 80012a0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80012a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	da05      	bge.n	80012ba <DrawLine+0x15e>
			tmp = x1;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80012b6:	893b      	ldrh	r3, [r7, #8]
 80012b8:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	82bb      	strh	r3, [r7, #20]
 80012be:	e00e      	b.n	80012de <DrawLine+0x182>
			DrawPixel(i, y0, c);
 80012c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff febd 	bl	800104c <DrawPixel>
		for (i = x0; i <= x1; i++) {
 80012d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	b29b      	uxth	r3, r3
 80012dc:	82bb      	strh	r3, [r7, #20]
 80012de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	ddea      	ble.n	80012c0 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 80012ea:	e039      	b.n	8001360 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 80012ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fea7 	bl	800104c <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80012fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001302:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001306:	429a      	cmp	r2, r3
 8001308:	d105      	bne.n	8001316 <DrawLine+0x1ba>
 800130a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800130e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001312:	429a      	cmp	r2, r3
 8001314:	d023      	beq.n	800135e <DrawLine+0x202>
			break;
		}
		e2 = err;
 8001316:	8afb      	ldrh	r3, [r7, #22]
 8001318:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800131a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800131e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001322:	425b      	negs	r3, r3
 8001324:	429a      	cmp	r2, r3
 8001326:	dd09      	ble.n	800133c <DrawLine+0x1e0>
			err -= dy;
 8001328:	8afa      	ldrh	r2, [r7, #22]
 800132a:	8a3b      	ldrh	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 800133c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	dad1      	bge.n	80012ec <DrawLine+0x190>
			err += dx;
 8001348:	8afa      	ldrh	r2, [r7, #22]
 800134a:	8a7b      	ldrh	r3, [r7, #18]
 800134c:	4413      	add	r3, r2
 800134e:	b29b      	uxth	r3, r3
 8001350:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	89bb      	ldrh	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 800135c:	e7c6      	b.n	80012ec <DrawLine+0x190>
			break;
 800135e:	bf00      	nop
		}
	}
}
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
	...

08001368 <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4604      	mov	r4, r0
 8001370:	1d38      	adds	r0, r7, #4
 8001372:	e880 0006 	stmia.w	r0, {r1, r2}
 8001376:	461a      	mov	r2, r3
 8001378:	4623      	mov	r3, r4
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	4613      	mov	r3, r2
 800137e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b1f      	cmp	r3, #31
 8001384:	d902      	bls.n	800138c <WriteChar+0x24>
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b7e      	cmp	r3, #126	; 0x7e
 800138a:	d901      	bls.n	8001390 <WriteChar+0x28>
        return 0;
 800138c:	2300      	movs	r3, #0
 800138e:	e06f      	b.n	8001470 <WriteChar+0x108>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <WriteChar+0x110>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800139e:	dc07      	bgt.n	80013b0 <WriteChar+0x48>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <WriteChar+0x110>)
 80013a2:	885b      	ldrh	r3, [r3, #2]
 80013a4:	461a      	mov	r2, r3
 80013a6:	797b      	ldrb	r3, [r7, #5]
 80013a8:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 80013aa:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80013ae:	dd01      	ble.n	80013b4 <WriteChar+0x4c>
    {
        // Not enough space on current line
        return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e05d      	b.n	8001470 <WriteChar+0x108>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	e04c      	b.n	8001454 <WriteChar+0xec>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3b20      	subs	r3, #32
 80013c0:	7979      	ldrb	r1, [r7, #5]
 80013c2:	fb01 f303 	mul.w	r3, r1, r3
 80013c6:	4619      	mov	r1, r3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	440b      	add	r3, r1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	e034      	b.n	8001444 <WriteChar+0xdc>
            if((b << j) & 0x8000)  {
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d012      	beq.n	8001410 <WriteChar+0xa8>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <WriteChar+0x110>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b218      	sxth	r0, r3
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <WriteChar+0x110>)
 80013fa:	885a      	ldrh	r2, [r3, #2]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21b      	sxth	r3, r3
 8001406:	7bba      	ldrb	r2, [r7, #14]
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fe1f 	bl	800104c <DrawPixel>
 800140e:	e016      	b.n	800143e <WriteChar+0xd6>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <WriteChar+0x110>)
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4413      	add	r3, r2
 800141a:	b29b      	uxth	r3, r3
 800141c:	b218      	sxth	r0, r3
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <WriteChar+0x110>)
 8001420:	885a      	ldrh	r2, [r3, #2]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	b219      	sxth	r1, r3
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	2b00      	cmp	r3, #0
 8001430:	bf0c      	ite	eq
 8001432:	2301      	moveq	r3, #1
 8001434:	2300      	movne	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	f7ff fe07 	bl	800104c <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	3301      	adds	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4293      	cmp	r3, r2
 800144c:	d3c5      	bcc.n	80013da <WriteChar+0x72>
    for(i = 0; i < Font.FontHeight; i++) {
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	797b      	ldrb	r3, [r7, #5]
 8001456:	461a      	mov	r2, r3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4293      	cmp	r3, r2
 800145c:	d3ad      	bcc.n	80013ba <WriteChar+0x52>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <WriteChar+0x110>)
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	793b      	ldrb	r3, [r7, #4]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b03      	ldr	r3, [pc, #12]	; (8001478 <WriteChar+0x110>)
 800146c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3724      	adds	r7, #36	; 0x24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	20003dd4 	.word	0x20003dd4

0800147c <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	1d38      	adds	r0, r7, #4
 8001486:	e880 0006 	stmia.w	r0, {r1, r2}
 800148a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800148c:	e012      	b.n	80014b4 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	7818      	ldrb	r0, [r3, #0]
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	1d3a      	adds	r2, r7, #4
 8001496:	ca06      	ldmia	r2, {r1, r2}
 8001498:	f7ff ff66 	bl	8001368 <WriteChar>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d002      	beq.n	80014ae <WriteString+0x32>
            // Char could not be written
            return *str;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	e008      	b.n	80014c0 <WriteString+0x44>
        }

        // Next char
        str++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e8      	bne.n	800148e <WriteString+0x12>
    }

    // Everything ok
    return *str;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	781b      	ldrb	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	80fb      	strh	r3, [r7, #6]
 80014d4:	4613      	mov	r3, r2
 80014d6:	80bb      	strh	r3, [r7, #4]
    VGA.CurrentX = x;
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SetCursor+0x28>)
 80014dc:	801a      	strh	r2, [r3, #0]
    VGA.CurrentY = y;
 80014de:	88ba      	ldrh	r2, [r7, #4]
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <SetCursor+0x28>)
 80014e2:	805a      	strh	r2, [r3, #2]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20003dd4 	.word	0x20003dd4

080014f4 <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4623      	mov	r3, r4
 8001504:	80fb      	strh	r3, [r7, #6]
 8001506:	4603      	mov	r3, r0
 8001508:	80bb      	strh	r3, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	807b      	strh	r3, [r7, #2]
 800150e:	4613      	mov	r3, r2
 8001510:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 8001512:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001516:	425b      	negs	r3, r3
 8001518:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 800151e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001522:	f1c3 0301 	rsb	r3, r3, #1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001532:	da6f      	bge.n	8001614 <DrawCircle+0x120>
 8001534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001538:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800153c:	da6a      	bge.n	8001614 <DrawCircle+0x120>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	b29b      	uxth	r3, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b218      	sxth	r0, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	b29a      	uxth	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	b21b      	sxth	r3, r3
 8001556:	787a      	ldrb	r2, [r7, #1]
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fd77 	bl	800104c <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	b29a      	uxth	r2, r3
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4413      	add	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	b218      	sxth	r0, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	b29a      	uxth	r2, r3
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	b21b      	sxth	r3, r3
 8001576:	787a      	ldrb	r2, [r7, #1]
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fd67 	bl	800104c <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	b29a      	uxth	r2, r3
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4413      	add	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	b218      	sxth	r0, r3
 800158a:	88ba      	ldrh	r2, [r7, #4]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	b29b      	uxth	r3, r3
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	b21b      	sxth	r3, r3
 8001596:	787a      	ldrb	r2, [r7, #1]
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fd57 	bl	800104c <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 800159e:	88fa      	ldrh	r2, [r7, #6]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b218      	sxth	r0, r3
 80015aa:	88ba      	ldrh	r2, [r7, #4]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	787a      	ldrb	r2, [r7, #1]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fd47 	bl	800104c <DrawPixel>
        e2 = err;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dc13      	bgt.n	80015f2 <DrawCircle+0xfe>
            y++;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3301      	adds	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	3301      	adds	r3, #1
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	425b      	negs	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d105      	bne.n	80015f2 <DrawCircle+0xfe>
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dc01      	bgt.n	80015f2 <DrawCircle+0xfe>
              e2 = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dd08      	ble.n	800160c <DrawCircle+0x118>
          x++;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	3301      	adds	r3, #1
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dd95      	ble.n	800153e <DrawCircle+0x4a>

    return;
 8001612:	e000      	b.n	8001616 <DrawCircle+0x122>
    return;
 8001614:	bf00      	nop
}
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af02      	add	r7, sp, #8
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	4603      	mov	r3, r0
 8001630:	80bb      	strh	r3, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 800163a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800163e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001642:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001646:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800164a:	7e3b      	ldrb	r3, [r7, #24]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	f7ff fd84 	bl	800115c <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 8001654:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001658:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800165c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001660:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001664:	7e3b      	ldrb	r3, [r7, #24]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4623      	mov	r3, r4
 800166a:	f7ff fd77 	bl	800115c <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 800166e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001672:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001676:	f9b7 1000 	ldrsh.w	r1, [r7]
 800167a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800167e:	7e3b      	ldrb	r3, [r7, #24]
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4623      	mov	r3, r4
 8001684:	f7ff fd6a 	bl	800115c <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 8001688:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800168c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001690:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001694:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001698:	7e3b      	ldrb	r3, [r7, #24]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4623      	mov	r3, r4
 800169e:	f7ff fd5d 	bl	800115c <DrawLine>
  return;
 80016a2:	bf00      	nop
}
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
	...

080016ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	; (80016e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016d2:	f7ff fc9d 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f002 fc97 	bl	8004008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016da:	f7fe fe87 	bl	80003ec <main>
  bx lr
 80016de:	4770      	bx	lr
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80016e8:	08005db0 	.word	0x08005db0
  ldr r2, =_sbss
 80016ec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80016f0:	20003dec 	.word	0x20003dec

080016f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC1_2_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x28>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f947 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fa06 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f95f 	bl	8001a06 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f927 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000000c 	.word	0x2000000c
 800177c:	2000001c 	.word	0x2000001c
 8001780:	20000018 	.word	0x20000018

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x1c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x20>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x20>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	2000001c 	.word	0x2000001c
 80017a4:	20003dd8 	.word	0x20003dd8

080017a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <HAL_GetTick+0x10>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20003dd8 	.word	0x20003dd8

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fff0 	bl	80017a8 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffe0 	bl	80017a8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000001c 	.word	0x2000001c

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff90 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff2d 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff42 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e043      	b.n	8001abe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_DMA_Init+0xa8>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_DMA_Init+0xac>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_DMA_Init+0xb0>)
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	bffdfff8 	.word	0xbffdfff8
 8001acc:	cccccccd 	.word	0xcccccccd
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Start_IT+0x20>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e04a      	b.n	8001b8a <HAL_DMA_Start_IT+0xb6>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d13a      	bne.n	8001b7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f972 	bl	8001e14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 020e 	orr.w	r2, r2, #14
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e00f      	b.n	8001b6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0204 	bic.w	r2, r2, #4
 8001b58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 020a 	orr.w	r2, r2, #10
 8001b68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e005      	b.n	8001b88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
 8001b86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2204      	movs	r2, #4
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e020      	b.n	8001bfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020e 	bic.w	r2, r2, #14
 8001bc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2204      	movs	r2, #4
 8001c26:	409a      	lsls	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04f      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xc8>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04a      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0204 	bic.w	r2, r2, #4
 8001c56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a66      	ldr	r2, [pc, #408]	; (8001df8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d029      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0xae>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <HAL_DMA_IRQHandler+0x1f4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d022      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0xaa>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_DMA_IRQHandler+0x1f8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01a      	beq.n	8001cac <HAL_DMA_IRQHandler+0xa4>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a62      	ldr	r2, [pc, #392]	; (8001e04 <HAL_DMA_IRQHandler+0x1fc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d012      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x9e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a60      	ldr	r2, [pc, #384]	; (8001e08 <HAL_DMA_IRQHandler+0x200>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00a      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x98>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5f      	ldr	r2, [pc, #380]	; (8001e0c <HAL_DMA_IRQHandler+0x204>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d102      	bne.n	8001c9a <HAL_DMA_IRQHandler+0x92>
 8001c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c98:	e00e      	b.n	8001cb8 <HAL_DMA_IRQHandler+0xb0>
 8001c9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c9e:	e00b      	b.n	8001cb8 <HAL_DMA_IRQHandler+0xb0>
 8001ca0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ca4:	e008      	b.n	8001cb8 <HAL_DMA_IRQHandler+0xb0>
 8001ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001caa:	e005      	b.n	8001cb8 <HAL_DMA_IRQHandler+0xb0>
 8001cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb0:	e002      	b.n	8001cb8 <HAL_DMA_IRQHandler+0xb0>
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	e000      	b.n	8001cb8 <HAL_DMA_IRQHandler+0xb0>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <HAL_DMA_IRQHandler+0x208>)
 8001cba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8094 	beq.w	8001dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	e08e      	b.n	8001dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d056      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x186>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d051      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10b      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 020a 	bic.w	r2, r2, #10
 8001d06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a38      	ldr	r2, [pc, #224]	; (8001df8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d029      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x166>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a37      	ldr	r2, [pc, #220]	; (8001dfc <HAL_DMA_IRQHandler+0x1f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x162>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <HAL_DMA_IRQHandler+0x1f8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01a      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x15c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a34      	ldr	r2, [pc, #208]	; (8001e04 <HAL_DMA_IRQHandler+0x1fc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d012      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x156>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a32      	ldr	r2, [pc, #200]	; (8001e08 <HAL_DMA_IRQHandler+0x200>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x150>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a31      	ldr	r2, [pc, #196]	; (8001e0c <HAL_DMA_IRQHandler+0x204>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d102      	bne.n	8001d52 <HAL_DMA_IRQHandler+0x14a>
 8001d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d50:	e00e      	b.n	8001d70 <HAL_DMA_IRQHandler+0x168>
 8001d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d56:	e00b      	b.n	8001d70 <HAL_DMA_IRQHandler+0x168>
 8001d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5c:	e008      	b.n	8001d70 <HAL_DMA_IRQHandler+0x168>
 8001d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d62:	e005      	b.n	8001d70 <HAL_DMA_IRQHandler+0x168>
 8001d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d68:	e002      	b.n	8001d70 <HAL_DMA_IRQHandler+0x168>
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	e000      	b.n	8001d70 <HAL_DMA_IRQHandler+0x168>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_DMA_IRQHandler+0x208>)
 8001d72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d034      	beq.n	8001dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d8c:	e02f      	b.n	8001dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2208      	movs	r2, #8
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d028      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x1e8>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 020e 	bic.w	r2, r2, #14
 8001db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
    }
  }
  return;
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
}
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40020008 	.word	0x40020008
 8001dfc:	4002001c 	.word	0x4002001c
 8001e00:	40020030 	.word	0x40020030
 8001e04:	40020044 	.word	0x40020044
 8001e08:	40020058 	.word	0x40020058
 8001e0c:	4002006c 	.word	0x4002006c
 8001e10:	40020000 	.word	0x40020000

08001e14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d108      	bne.n	8001e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e52:	e007      	b.n	8001e64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b08b      	sub	sp, #44	; 0x2c
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e169      	b.n	8002158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e84:	2201      	movs	r2, #1
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8158 	bne.w	8002152 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a9a      	ldr	r2, [pc, #616]	; (8002110 <HAL_GPIO_Init+0x2a0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d05e      	beq.n	8001f6a <HAL_GPIO_Init+0xfa>
 8001eac:	4a98      	ldr	r2, [pc, #608]	; (8002110 <HAL_GPIO_Init+0x2a0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d875      	bhi.n	8001f9e <HAL_GPIO_Init+0x12e>
 8001eb2:	4a98      	ldr	r2, [pc, #608]	; (8002114 <HAL_GPIO_Init+0x2a4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d058      	beq.n	8001f6a <HAL_GPIO_Init+0xfa>
 8001eb8:	4a96      	ldr	r2, [pc, #600]	; (8002114 <HAL_GPIO_Init+0x2a4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d86f      	bhi.n	8001f9e <HAL_GPIO_Init+0x12e>
 8001ebe:	4a96      	ldr	r2, [pc, #600]	; (8002118 <HAL_GPIO_Init+0x2a8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d052      	beq.n	8001f6a <HAL_GPIO_Init+0xfa>
 8001ec4:	4a94      	ldr	r2, [pc, #592]	; (8002118 <HAL_GPIO_Init+0x2a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d869      	bhi.n	8001f9e <HAL_GPIO_Init+0x12e>
 8001eca:	4a94      	ldr	r2, [pc, #592]	; (800211c <HAL_GPIO_Init+0x2ac>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d04c      	beq.n	8001f6a <HAL_GPIO_Init+0xfa>
 8001ed0:	4a92      	ldr	r2, [pc, #584]	; (800211c <HAL_GPIO_Init+0x2ac>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d863      	bhi.n	8001f9e <HAL_GPIO_Init+0x12e>
 8001ed6:	4a92      	ldr	r2, [pc, #584]	; (8002120 <HAL_GPIO_Init+0x2b0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d046      	beq.n	8001f6a <HAL_GPIO_Init+0xfa>
 8001edc:	4a90      	ldr	r2, [pc, #576]	; (8002120 <HAL_GPIO_Init+0x2b0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d85d      	bhi.n	8001f9e <HAL_GPIO_Init+0x12e>
 8001ee2:	2b12      	cmp	r3, #18
 8001ee4:	d82a      	bhi.n	8001f3c <HAL_GPIO_Init+0xcc>
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d859      	bhi.n	8001f9e <HAL_GPIO_Init+0x12e>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <HAL_GPIO_Init+0x80>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001f45 	.word	0x08001f45
 8001ef8:	08001f57 	.word	0x08001f57
 8001efc:	08001f99 	.word	0x08001f99
 8001f00:	08001f9f 	.word	0x08001f9f
 8001f04:	08001f9f 	.word	0x08001f9f
 8001f08:	08001f9f 	.word	0x08001f9f
 8001f0c:	08001f9f 	.word	0x08001f9f
 8001f10:	08001f9f 	.word	0x08001f9f
 8001f14:	08001f9f 	.word	0x08001f9f
 8001f18:	08001f9f 	.word	0x08001f9f
 8001f1c:	08001f9f 	.word	0x08001f9f
 8001f20:	08001f9f 	.word	0x08001f9f
 8001f24:	08001f9f 	.word	0x08001f9f
 8001f28:	08001f9f 	.word	0x08001f9f
 8001f2c:	08001f9f 	.word	0x08001f9f
 8001f30:	08001f9f 	.word	0x08001f9f
 8001f34:	08001f4d 	.word	0x08001f4d
 8001f38:	08001f61 	.word	0x08001f61
 8001f3c:	4a79      	ldr	r2, [pc, #484]	; (8002124 <HAL_GPIO_Init+0x2b4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f42:	e02c      	b.n	8001f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e029      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	3304      	adds	r3, #4
 8001f52:	623b      	str	r3, [r7, #32]
          break;
 8001f54:	e024      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e01f      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	330c      	adds	r3, #12
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e01a      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f72:	2304      	movs	r3, #4
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e013      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f80:	2308      	movs	r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	611a      	str	r2, [r3, #16]
          break;
 8001f8a:	e009      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	615a      	str	r2, [r3, #20]
          break;
 8001f96:	e003      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
          break;
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x130>
          break;
 8001f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2bff      	cmp	r3, #255	; 0xff
 8001fa4:	d801      	bhi.n	8001faa <HAL_GPIO_Init+0x13a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e001      	b.n	8001fae <HAL_GPIO_Init+0x13e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d802      	bhi.n	8001fbc <HAL_GPIO_Init+0x14c>
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x152>
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	3b08      	subs	r3, #8
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	210f      	movs	r1, #15
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	6a39      	ldr	r1, [r7, #32]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80b1 	beq.w	8002152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <HAL_GPIO_Init+0x2b8>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a4c      	ldr	r2, [pc, #304]	; (8002128 <HAL_GPIO_Init+0x2b8>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <HAL_GPIO_Init+0x2b8>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002008:	4a48      	ldr	r2, [pc, #288]	; (800212c <HAL_GPIO_Init+0x2bc>)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a40      	ldr	r2, [pc, #256]	; (8002130 <HAL_GPIO_Init+0x2c0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_GPIO_Init+0x1ec>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3f      	ldr	r2, [pc, #252]	; (8002134 <HAL_GPIO_Init+0x2c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00d      	beq.n	8002058 <HAL_GPIO_Init+0x1e8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3e      	ldr	r2, [pc, #248]	; (8002138 <HAL_GPIO_Init+0x2c8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <HAL_GPIO_Init+0x1e4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3d      	ldr	r2, [pc, #244]	; (800213c <HAL_GPIO_Init+0x2cc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d101      	bne.n	8002050 <HAL_GPIO_Init+0x1e0>
 800204c:	2303      	movs	r3, #3
 800204e:	e006      	b.n	800205e <HAL_GPIO_Init+0x1ee>
 8002050:	2304      	movs	r3, #4
 8002052:	e004      	b.n	800205e <HAL_GPIO_Init+0x1ee>
 8002054:	2302      	movs	r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x1ee>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_Init+0x1ee>
 800205c:	2300      	movs	r3, #0
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206e:	492f      	ldr	r1, [pc, #188]	; (800212c <HAL_GPIO_Init+0x2bc>)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	492c      	ldr	r1, [pc, #176]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4928      	ldr	r1, [pc, #160]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	491e      	ldr	r1, [pc, #120]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4918      	ldr	r1, [pc, #96]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4914      	ldr	r1, [pc, #80]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d021      	beq.n	8002144 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_GPIO_Init+0x2d0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	60cb      	str	r3, [r1, #12]
 800210c:	e021      	b.n	8002152 <HAL_GPIO_Init+0x2e2>
 800210e:	bf00      	nop
 8002110:	10320000 	.word	0x10320000
 8002114:	10310000 	.word	0x10310000
 8002118:	10220000 	.word	0x10220000
 800211c:	10210000 	.word	0x10210000
 8002120:	10120000 	.word	0x10120000
 8002124:	10110000 	.word	0x10110000
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	40010800 	.word	0x40010800
 8002134:	40010c00 	.word	0x40010c00
 8002138:	40011000 	.word	0x40011000
 800213c:	40011400 	.word	0x40011400
 8002140:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	43db      	mvns	r3, r3
 800214c:	4909      	ldr	r1, [pc, #36]	; (8002174 <HAL_GPIO_Init+0x304>)
 800214e:	4013      	ands	r3, r2
 8002150:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	3301      	adds	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	f47f ae8e 	bne.w	8001e84 <HAL_GPIO_Init+0x14>
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	372c      	adds	r7, #44	; 0x2c
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fd ffc0 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e272      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8087 	beq.w	8002306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f8:	4b92      	ldr	r3, [pc, #584]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b04      	cmp	r3, #4
 8002202:	d00c      	beq.n	800221e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002204:	4b8f      	ldr	r3, [pc, #572]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d112      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
 8002210:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d10b      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d06c      	beq.n	8002304 <HAL_RCC_OscConfig+0x12c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d168      	bne.n	8002304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e24c      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x76>
 8002240:	4b80      	ldr	r3, [pc, #512]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7f      	ldr	r2, [pc, #508]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e02e      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0xbc>
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002294:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6a      	ldr	r2, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fa78 	bl	80017a8 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fa74 	bl	80017a8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e200      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xe4>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fa64 	bl	80017a8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fa60 	bl	80017a8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1ec      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x10c>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1c0      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4939      	ldr	r1, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x270>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fa19 	bl	80017a8 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7ff fa15 	bl	80017a8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1a1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_OscConfig+0x270>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff f9f8 	bl	80017a8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff f9f4 	bl	80017a8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e180      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03a      	beq.n	800245c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_RCC_OscConfig+0x274>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff f9d8 	bl	80017a8 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff f9d4 	bl	80017a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e160      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 faa6 	bl	800296c <RCC_Delay>
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_OscConfig+0x274>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff f9be 	bl	80017a8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242e:	e00f      	b.n	8002450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff f9ba 	bl	80017a8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d908      	bls.n	8002450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e146      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	42420000 	.word	0x42420000
 800244c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b92      	ldr	r3, [pc, #584]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e9      	bne.n	8002430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a6 	beq.w	80025b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b8b      	ldr	r3, [pc, #556]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a87      	ldr	r2, [pc, #540]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b85      	ldr	r3, [pc, #532]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7e      	ldr	r2, [pc, #504]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7ff f97b 	bl	80017a8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7ff f977 	bl	80017a8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e103      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x334>
 80024f2:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a69      	ldr	r2, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a66      	ldr	r2, [pc, #408]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	e01c      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x356>
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800252e:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a5a      	ldr	r2, [pc, #360]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a57      	ldr	r2, [pc, #348]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff f92b 	bl	80017a8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff f927 	bl	80017a8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <HAL_RCC_OscConfig+0x37e>
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff f915 	bl	80017a8 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff f911 	bl	80017a8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e09b      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a3b      	ldr	r2, [pc, #236]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d061      	beq.n	8002690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d146      	bne.n	8002662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff f8e5 	bl	80017a8 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff f8e1 	bl	80017a8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e06d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4921      	ldr	r1, [pc, #132]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a19      	ldr	r1, [r3, #32]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	430b      	orrs	r3, r1
 800262e:	491b      	ldr	r1, [pc, #108]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff f8b5 	bl	80017a8 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff f8b1 	bl	80017a8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
 8002660:	e035      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f89e 	bl	80017a8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff f89a 	bl	80017a8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e026      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x498>
 800268e:	e01e      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e019      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x500>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800275a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe ffec 	bl	80017a8 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe ffe8 	bl	80017a8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4922      	ldr	r1, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe ff4a 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080054e4 	.word	0x080054e4
 80028a8:	2000000c 	.word	0x2000000c
 80028ac:	20000018 	.word	0x20000018

080028b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b490      	push	{r4, r7}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_GetSysClockFreq+0xac>)
 80028b8:	1d3c      	adds	r4, r7, #4
 80028ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028c0:	f240 2301 	movw	r3, #513	; 0x201
 80028c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x46>
 80028ee:	e02b      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f2:	623b      	str	r3, [r7, #32]
      break;
 80028f4:	e02b      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	0c9b      	lsrs	r3, r3, #18
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3328      	adds	r3, #40	; 0x28
 8002900:	443b      	add	r3, r7
 8002902:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002906:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	0c5b      	lsrs	r3, r3, #17
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	3328      	adds	r3, #40	; 0x28
 800291e:	443b      	add	r3, r7
 8002920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002924:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292a:	fb03 f202 	mul.w	r2, r3, r2
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e004      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	623b      	str	r3, [r7, #32]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb4>)
 800294a:	623b      	str	r3, [r7, #32]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	6a3b      	ldr	r3, [r7, #32]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc90      	pop	{r4, r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	080054d4 	.word	0x080054d4
 8002960:	40021000 	.word	0x40021000
 8002964:	007a1200 	.word	0x007a1200
 8002968:	003d0900 	.word	0x003d0900

0800296c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <RCC_Delay+0x34>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <RCC_Delay+0x38>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0a5b      	lsrs	r3, r3, #9
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002988:	bf00      	nop
  }
  while (Delay --);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e5a      	subs	r2, r3, #1
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <RCC_Delay+0x1c>
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	2000000c 	.word	0x2000000c
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e076      	b.n	8002aa8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ca:	d009      	beq.n	80029e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
 80029d2:	e005      	b.n	80029e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe f8c4 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	ea42 0103 	orr.w	r1, r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	0c1a      	lsrs	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f002 0204 	and.w	r2, r2, #4
 8002a86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_SPI_Transmit_DMA+0x20>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e09b      	b.n	8002c08 <HAL_SPI_Transmit_DMA+0x158>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ae8:	e089      	b.n	8002bfe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_Transmit_DMA+0x46>
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002afa:	e080      	b.n	8002bfe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2203      	movs	r2, #3
 8002b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b42:	d10f      	bne.n	8002b64 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_SPI_Transmit_DMA+0x160>)
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <HAL_SPI_Transmit_DMA+0x164>)
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_SPI_Transmit_DMA+0x168>)
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	2200      	movs	r2, #0
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002b9c:	f7fe ff9a 	bl	8001ad4 <HAL_DMA_Start_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002bbe:	e01e      	b.n	8002bfe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d007      	beq.n	8002bde <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0202 	orr.w	r2, r2, #2
 8002bfc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	08002d53 	.word	0x08002d53
 8002c14:	08002cad 	.word	0x08002cad
 8002c18:	08002d6f 	.word	0x08002d6f

08002c1c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00f      	beq.n	8002c50 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe ffac 	bl	8001b92 <HAL_DMA_Abort>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0210 	orr.w	r2, r3, #16
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00f      	beq.n	8002c78 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe ff98 	bl	8001b92 <HAL_DMA_Abort>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f043 0210 	orr.w	r2, r3, #16
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0203 	bic.w	r2, r2, #3
 8002c86:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cba:	f7fe fd75 	bl	80017a8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d03b      	beq.n	8002d46 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0220 	bic.w	r2, r2, #32
 8002cdc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0202 	bic.w	r2, r2, #2
 8002cec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	2164      	movs	r1, #100	; 0x64
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f000 f8e4 	bl	8002ec0 <SPI_EndRxTxTransaction>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ffab 	bl	8002c9a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d44:	e002      	b.n	8002d4c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7fd fae0 	bl	800030c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7fd fa63 	bl	800022c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0203 	bic.w	r2, r2, #3
 8002d8a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0210 	orr.w	r2, r3, #16
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff ff7a 	bl	8002c9a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc0:	f7fe fcf2 	bl	80017a8 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd0:	f7fe fcea 	bl	80017a8 <HAL_GetTick>
 8002dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de6:	e054      	b.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d050      	beq.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df0:	f7fe fcda 	bl	80017a8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d902      	bls.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d13d      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d111      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e28:	d004      	beq.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d107      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4c:	d10f      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e017      	b.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d19b      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000000c 	.word	0x2000000c

08002ec0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff ff6a 	bl	8002db0 <SPI_WaitFlagStateUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e000      	b.n	8002ef4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e041      	b.n	8002f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fe9a 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 fc6a 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e03a      	b.n	800302a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIM_Base_Start_IT+0x98>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x58>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d009      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x58>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x58>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d111      	bne.n	8003018 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d010      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	e007      	b.n	8003028 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800

08003040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e041      	b.n	80030d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f839 	bl	80030de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 fbc8 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_TIM_PWM_Start+0x24>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e022      	b.n	800315a <HAL_TIM_PWM_Start+0x6a>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d109      	bne.n	800312e <HAL_TIM_PWM_Start+0x3e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e015      	b.n	800315a <HAL_TIM_PWM_Start+0x6a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d109      	bne.n	8003148 <HAL_TIM_PWM_Start+0x58>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e008      	b.n	800315a <HAL_TIM_PWM_Start+0x6a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e05e      	b.n	8003220 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0x82>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003170:	e013      	b.n	800319a <HAL_TIM_PWM_Start+0xaa>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0x92>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003180:	e00b      	b.n	800319a <HAL_TIM_PWM_Start+0xaa>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xa2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003190:	e003      	b.n	800319a <HAL_TIM_PWM_Start+0xaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fe44 	bl	8003e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_TIM_PWM_Start+0x138>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_TIM_PWM_Start+0x138>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIM_PWM_Start+0xfa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d009      	beq.n	80031ea <HAL_TIM_PWM_Start+0xfa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_TIM_PWM_Start+0x13c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIM_PWM_Start+0xfa>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <HAL_TIM_PWM_Start+0x140>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d111      	bne.n	800320e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d010      	beq.n	800321e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	e007      	b.n	800321e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800

08003234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0202 	mvn.w	r2, #2
 8003260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fab1 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 faa4 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fab3 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0204 	mvn.w	r2, #4
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa87 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa7a 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa89 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0208 	mvn.w	r2, #8
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2204      	movs	r2, #4
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa5d 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa50 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fa5f 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b10      	cmp	r3, #16
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0210 	mvn.w	r2, #16
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2208      	movs	r2, #8
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa33 	bl	80037de <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa26 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fa35 	bl	80037f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0201 	mvn.w	r2, #1
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fc ff06 	bl	80001c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fe02 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9f9 	bl	8003802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b20      	cmp	r3, #32
 800341c:	d10e      	bne.n	800343c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b20      	cmp	r3, #32
 800342a:	d107      	bne.n	800343c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0220 	mvn.w	r2, #32
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fdcd 	bl	8003fd6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800345a:	2302      	movs	r3, #2
 800345c:	e0ac      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	f200 809f 	bhi.w	80035ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080035ad 	.word	0x080035ad
 800347c:	080035ad 	.word	0x080035ad
 8003480:	080035ad 	.word	0x080035ad
 8003484:	080034e9 	.word	0x080034e9
 8003488:	080035ad 	.word	0x080035ad
 800348c:	080035ad 	.word	0x080035ad
 8003490:	080035ad 	.word	0x080035ad
 8003494:	0800352b 	.word	0x0800352b
 8003498:	080035ad 	.word	0x080035ad
 800349c:	080035ad 	.word	0x080035ad
 80034a0:	080035ad 	.word	0x080035ad
 80034a4:	0800356b 	.word	0x0800356b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa12 	bl	80038d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0204 	bic.w	r2, r2, #4
 80034d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	619a      	str	r2, [r3, #24]
      break;
 80034e6:	e062      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa58 	bl	80039a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6999      	ldr	r1, [r3, #24]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	021a      	lsls	r2, r3, #8
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
      break;
 8003528:	e041      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 faa1 	bl	8003a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0208 	orr.w	r2, r2, #8
 8003544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0204 	bic.w	r2, r2, #4
 8003554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	61da      	str	r2, [r3, #28]
      break;
 8003568:	e021      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 faeb 	bl	8003b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69d9      	ldr	r1, [r3, #28]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	61da      	str	r2, [r3, #28]
      break;
 80035aa:	e000      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_ConfigClockSource+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0b3      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x180>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003610:	d03e      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0xd0>
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003616:	f200 8087 	bhi.w	8003728 <HAL_TIM_ConfigClockSource+0x168>
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	f000 8085 	beq.w	800372c <HAL_TIM_ConfigClockSource+0x16c>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d87f      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003628:	2b70      	cmp	r3, #112	; 0x70
 800362a:	d01a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0xa2>
 800362c:	2b70      	cmp	r3, #112	; 0x70
 800362e:	d87b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003630:	2b60      	cmp	r3, #96	; 0x60
 8003632:	d050      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x116>
 8003634:	2b60      	cmp	r3, #96	; 0x60
 8003636:	d877      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003638:	2b50      	cmp	r3, #80	; 0x50
 800363a:	d03c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0xf6>
 800363c:	2b50      	cmp	r3, #80	; 0x50
 800363e:	d873      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d058      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x136>
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d86f      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003648:	2b30      	cmp	r3, #48	; 0x30
 800364a:	d064      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d86b      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003650:	2b20      	cmp	r3, #32
 8003652:	d060      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d867      	bhi.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d05c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
 800365c:	2b10      	cmp	r3, #16
 800365e:	d05a      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003660:	e062      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f000 fbbe 	bl	8003df2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003684:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	609a      	str	r2, [r3, #8]
      break;
 800368e:	e04e      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f000 fba7 	bl	8003df2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b2:	609a      	str	r2, [r3, #8]
      break;
 80036b4:	e03b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 fb1e 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2150      	movs	r1, #80	; 0x50
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fb75 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80036d4:	e02b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f000 fb3c 	bl	8003d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2160      	movs	r1, #96	; 0x60
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fb65 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80036f4:	e01b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	461a      	mov	r2, r3
 8003704:	f000 fafe 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2140      	movs	r1, #64	; 0x40
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb55 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003714:	e00b      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f000 fb4c 	bl	8003dbe <TIM_ITRx_SetConfig>
        break;
 8003726:	e002      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800372c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIM_SlaveConfigSynchro+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e031      	b.n	80037c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa38 	bl	8003be8 <TIM_SlaveTimer_SetConfig>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e018      	b.n	80037c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <TIM_Base_SetConfig+0xb8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x30>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x30>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <TIM_Base_SetConfig+0xbc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x30>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <TIM_Base_SetConfig+0xc0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <TIM_Base_SetConfig+0xb8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_Base_SetConfig+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d007      	beq.n	8003876 <TIM_Base_SetConfig+0x62>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <TIM_Base_SetConfig+0xbc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_Base_SetConfig+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <TIM_Base_SetConfig+0xc0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <TIM_Base_SetConfig+0xb8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40000400 	.word	0x40000400
 80038d4:	40000800 	.word	0x40000800

080038d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0201 	bic.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f023 0302 	bic.w	r3, r3, #2
 8003920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <TIM_OC1_SetConfig+0xc8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10c      	bne.n	800394e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0308 	bic.w	r3, r3, #8
 800393a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <TIM_OC1_SetConfig+0xc8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d111      	bne.n	800397a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800395c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0210 	bic.w	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0320 	bic.w	r3, r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <TIM_OC2_SetConfig+0xd0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10d      	bne.n	8003a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <TIM_OC2_SetConfig+0xd0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d113      	bne.n	8003a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <TIM_OC3_SetConfig+0xd0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10d      	bne.n	8003af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <TIM_OC3_SetConfig+0xd0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d113      	bne.n	8003b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	621a      	str	r2, [r3, #32]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40012c00 	.word	0x40012c00

08003b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	031b      	lsls	r3, r3, #12
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a0f      	ldr	r2, [pc, #60]	; (8003be4 <TIM_OC4_SetConfig+0x98>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d109      	bne.n	8003bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	40012c00 	.word	0x40012c00

08003be8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c00:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b70      	cmp	r3, #112	; 0x70
 8003c2c:	d01a      	beq.n	8003c64 <TIM_SlaveTimer_SetConfig+0x7c>
 8003c2e:	2b70      	cmp	r3, #112	; 0x70
 8003c30:	d860      	bhi.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c32:	2b60      	cmp	r3, #96	; 0x60
 8003c34:	d054      	beq.n	8003ce0 <TIM_SlaveTimer_SetConfig+0xf8>
 8003c36:	2b60      	cmp	r3, #96	; 0x60
 8003c38:	d85c      	bhi.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c3a:	2b50      	cmp	r3, #80	; 0x50
 8003c3c:	d046      	beq.n	8003ccc <TIM_SlaveTimer_SetConfig+0xe4>
 8003c3e:	2b50      	cmp	r3, #80	; 0x50
 8003c40:	d858      	bhi.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d019      	beq.n	8003c7a <TIM_SlaveTimer_SetConfig+0x92>
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d854      	bhi.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c4a:	2b30      	cmp	r3, #48	; 0x30
 8003c4c:	d054      	beq.n	8003cf8 <TIM_SlaveTimer_SetConfig+0x110>
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	d850      	bhi.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d050      	beq.n	8003cf8 <TIM_SlaveTimer_SetConfig+0x110>
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d84c      	bhi.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04c      	beq.n	8003cf8 <TIM_SlaveTimer_SetConfig+0x110>
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d04a      	beq.n	8003cf8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003c62:	e047      	b.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68d9      	ldr	r1, [r3, #12]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f000 f8bd 	bl	8003df2 <TIM_ETR_SetConfig>
      break;
 8003c78:	e03f      	b.n	8003cfa <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d101      	bne.n	8003c86 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e03a      	b.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
      break;
 8003cca:	e016      	b.n	8003cfa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f000 f813 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      break;
 8003cde:	e00c      	b.n	8003cfa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f000 f837 	bl	8003d60 <TIM_TI2_ConfigInputStage>
      break;
 8003cf2:	e002      	b.n	8003cfa <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003cf8:	bf00      	nop
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 030a 	bic.w	r3, r3, #10
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f023 0210 	bic.w	r2, r3, #16
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	031b      	lsls	r3, r3, #12
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	021a      	lsls	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	609a      	str	r2, [r3, #8]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2201      	movs	r2, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	401a      	ands	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	fa01 f303 	lsl.w	r3, r1, r3
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e046      	b.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800

08003f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e03d      	b.n	8003fcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
	...

08003ffc <__errno>:
 8003ffc:	4b01      	ldr	r3, [pc, #4]	; (8004004 <__errno+0x8>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000020 	.word	0x20000020

08004008 <__libc_init_array>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	2600      	movs	r6, #0
 800400c:	4d0c      	ldr	r5, [pc, #48]	; (8004040 <__libc_init_array+0x38>)
 800400e:	4c0d      	ldr	r4, [pc, #52]	; (8004044 <__libc_init_array+0x3c>)
 8004010:	1b64      	subs	r4, r4, r5
 8004012:	10a4      	asrs	r4, r4, #2
 8004014:	42a6      	cmp	r6, r4
 8004016:	d109      	bne.n	800402c <__libc_init_array+0x24>
 8004018:	f001 fa3c 	bl	8005494 <_init>
 800401c:	2600      	movs	r6, #0
 800401e:	4d0a      	ldr	r5, [pc, #40]	; (8004048 <__libc_init_array+0x40>)
 8004020:	4c0a      	ldr	r4, [pc, #40]	; (800404c <__libc_init_array+0x44>)
 8004022:	1b64      	subs	r4, r4, r5
 8004024:	10a4      	asrs	r4, r4, #2
 8004026:	42a6      	cmp	r6, r4
 8004028:	d105      	bne.n	8004036 <__libc_init_array+0x2e>
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004030:	4798      	blx	r3
 8004032:	3601      	adds	r6, #1
 8004034:	e7ee      	b.n	8004014 <__libc_init_array+0xc>
 8004036:	f855 3b04 	ldr.w	r3, [r5], #4
 800403a:	4798      	blx	r3
 800403c:	3601      	adds	r6, #1
 800403e:	e7f2      	b.n	8004026 <__libc_init_array+0x1e>
 8004040:	08005da8 	.word	0x08005da8
 8004044:	08005da8 	.word	0x08005da8
 8004048:	08005da8 	.word	0x08005da8
 800404c:	08005dac 	.word	0x08005dac

08004050 <memcpy>:
 8004050:	440a      	add	r2, r1
 8004052:	4291      	cmp	r1, r2
 8004054:	f100 33ff 	add.w	r3, r0, #4294967295
 8004058:	d100      	bne.n	800405c <memcpy+0xc>
 800405a:	4770      	bx	lr
 800405c:	b510      	push	{r4, lr}
 800405e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004062:	4291      	cmp	r1, r2
 8004064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004068:	d1f9      	bne.n	800405e <memcpy+0xe>
 800406a:	bd10      	pop	{r4, pc}

0800406c <memset>:
 800406c:	4603      	mov	r3, r0
 800406e:	4402      	add	r2, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <rand>:
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <rand+0x5c>)
 800407e:	b510      	push	{r4, lr}
 8004080:	681c      	ldr	r4, [r3, #0]
 8004082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004084:	b9b3      	cbnz	r3, 80040b4 <rand+0x38>
 8004086:	2018      	movs	r0, #24
 8004088:	f000 f886 	bl	8004198 <malloc>
 800408c:	4602      	mov	r2, r0
 800408e:	63a0      	str	r0, [r4, #56]	; 0x38
 8004090:	b920      	cbnz	r0, 800409c <rand+0x20>
 8004092:	214e      	movs	r1, #78	; 0x4e
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <rand+0x60>)
 8004096:	4812      	ldr	r0, [pc, #72]	; (80040e0 <rand+0x64>)
 8004098:	f000 f84e 	bl	8004138 <__assert_func>
 800409c:	4911      	ldr	r1, [pc, #68]	; (80040e4 <rand+0x68>)
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <rand+0x6c>)
 80040a0:	e9c0 1300 	strd	r1, r3, [r0]
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <rand+0x70>)
 80040a6:	2100      	movs	r1, #0
 80040a8:	6083      	str	r3, [r0, #8]
 80040aa:	230b      	movs	r3, #11
 80040ac:	8183      	strh	r3, [r0, #12]
 80040ae:	2001      	movs	r0, #1
 80040b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80040b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <rand+0x74>)
 80040b8:	6920      	ldr	r0, [r4, #16]
 80040ba:	6963      	ldr	r3, [r4, #20]
 80040bc:	4342      	muls	r2, r0
 80040be:	490d      	ldr	r1, [pc, #52]	; (80040f4 <rand+0x78>)
 80040c0:	fb01 2203 	mla	r2, r1, r3, r2
 80040c4:	fba0 0101 	umull	r0, r1, r0, r1
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	eb42 0001 	adc.w	r0, r2, r1
 80040ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80040d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80040d6:	bd10      	pop	{r4, pc}
 80040d8:	20000020 	.word	0x20000020
 80040dc:	08005c64 	.word	0x08005c64
 80040e0:	08005c7b 	.word	0x08005c7b
 80040e4:	abcd330e 	.word	0xabcd330e
 80040e8:	e66d1234 	.word	0xe66d1234
 80040ec:	0005deec 	.word	0x0005deec
 80040f0:	5851f42d 	.word	0x5851f42d
 80040f4:	4c957f2d 	.word	0x4c957f2d

080040f8 <siprintf>:
 80040f8:	b40e      	push	{r1, r2, r3}
 80040fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040fe:	b500      	push	{lr}
 8004100:	b09c      	sub	sp, #112	; 0x70
 8004102:	ab1d      	add	r3, sp, #116	; 0x74
 8004104:	9002      	str	r0, [sp, #8]
 8004106:	9006      	str	r0, [sp, #24]
 8004108:	9107      	str	r1, [sp, #28]
 800410a:	9104      	str	r1, [sp, #16]
 800410c:	4808      	ldr	r0, [pc, #32]	; (8004130 <siprintf+0x38>)
 800410e:	4909      	ldr	r1, [pc, #36]	; (8004134 <siprintf+0x3c>)
 8004110:	f853 2b04 	ldr.w	r2, [r3], #4
 8004114:	9105      	str	r1, [sp, #20]
 8004116:	6800      	ldr	r0, [r0, #0]
 8004118:	a902      	add	r1, sp, #8
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	f000 f97c 	bl	8004418 <_svfiprintf_r>
 8004120:	2200      	movs	r2, #0
 8004122:	9b02      	ldr	r3, [sp, #8]
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	b01c      	add	sp, #112	; 0x70
 8004128:	f85d eb04 	ldr.w	lr, [sp], #4
 800412c:	b003      	add	sp, #12
 800412e:	4770      	bx	lr
 8004130:	20000020 	.word	0x20000020
 8004134:	ffff0208 	.word	0xffff0208

08004138 <__assert_func>:
 8004138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800413a:	4614      	mov	r4, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <__assert_func+0x2c>)
 8004140:	4605      	mov	r5, r0
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68d8      	ldr	r0, [r3, #12]
 8004146:	b14c      	cbz	r4, 800415c <__assert_func+0x24>
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <__assert_func+0x30>)
 800414a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800414e:	9100      	str	r1, [sp, #0]
 8004150:	462b      	mov	r3, r5
 8004152:	4906      	ldr	r1, [pc, #24]	; (800416c <__assert_func+0x34>)
 8004154:	f000 f80e 	bl	8004174 <fiprintf>
 8004158:	f000 fe1c 	bl	8004d94 <abort>
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <__assert_func+0x38>)
 800415e:	461c      	mov	r4, r3
 8004160:	e7f3      	b.n	800414a <__assert_func+0x12>
 8004162:	bf00      	nop
 8004164:	20000020 	.word	0x20000020
 8004168:	08005cd6 	.word	0x08005cd6
 800416c:	08005ce3 	.word	0x08005ce3
 8004170:	08005d11 	.word	0x08005d11

08004174 <fiprintf>:
 8004174:	b40e      	push	{r1, r2, r3}
 8004176:	b503      	push	{r0, r1, lr}
 8004178:	4601      	mov	r1, r0
 800417a:	ab03      	add	r3, sp, #12
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <fiprintf+0x20>)
 800417e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	f000 fa6f 	bl	8004668 <_vfiprintf_r>
 800418a:	b002      	add	sp, #8
 800418c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004190:	b003      	add	sp, #12
 8004192:	4770      	bx	lr
 8004194:	20000020 	.word	0x20000020

08004198 <malloc>:
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <malloc+0xc>)
 800419a:	4601      	mov	r1, r0
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f000 b86b 	b.w	8004278 <_malloc_r>
 80041a2:	bf00      	nop
 80041a4:	20000020 	.word	0x20000020

080041a8 <_free_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d040      	beq.n	8004232 <_free_r+0x8a>
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f0c      	subs	r4, r1, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfb8      	it	lt
 80041ba:	18e4      	addlt	r4, r4, r3
 80041bc:	f001 f836 	bl	800522c <__malloc_lock>
 80041c0:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <_free_r+0x8c>)
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	b933      	cbnz	r3, 80041d4 <_free_r+0x2c>
 80041c6:	6063      	str	r3, [r4, #4]
 80041c8:	6014      	str	r4, [r2, #0]
 80041ca:	4628      	mov	r0, r5
 80041cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d0:	f001 b832 	b.w	8005238 <__malloc_unlock>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d908      	bls.n	80041ea <_free_r+0x42>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	1821      	adds	r1, r4, r0
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf01      	itttt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	1809      	addeq	r1, r1, r0
 80041e6:	6021      	streq	r1, [r4, #0]
 80041e8:	e7ed      	b.n	80041c6 <_free_r+0x1e>
 80041ea:	461a      	mov	r2, r3
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b10b      	cbz	r3, 80041f4 <_free_r+0x4c>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d9fa      	bls.n	80041ea <_free_r+0x42>
 80041f4:	6811      	ldr	r1, [r2, #0]
 80041f6:	1850      	adds	r0, r2, r1
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d10b      	bne.n	8004214 <_free_r+0x6c>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	4401      	add	r1, r0
 8004200:	1850      	adds	r0, r2, r1
 8004202:	4283      	cmp	r3, r0
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	d1e0      	bne.n	80041ca <_free_r+0x22>
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4401      	add	r1, r0
 800420e:	6011      	str	r1, [r2, #0]
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	e7da      	b.n	80041ca <_free_r+0x22>
 8004214:	d902      	bls.n	800421c <_free_r+0x74>
 8004216:	230c      	movs	r3, #12
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	e7d6      	b.n	80041ca <_free_r+0x22>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	1821      	adds	r1, r4, r0
 8004220:	428b      	cmp	r3, r1
 8004222:	bf01      	itttt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6054      	str	r4, [r2, #4]
 8004230:	e7cb      	b.n	80041ca <_free_r+0x22>
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	20003ddc 	.word	0x20003ddc

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0e      	ldr	r6, [pc, #56]	; (8004274 <sbrk_aligned+0x3c>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 fcd6 	bl	8004bf4 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 fcd1 	bl	8004bf4 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d00a      	beq.n	800426c <sbrk_aligned+0x34>
 8004256:	1cc4      	adds	r4, r0, #3
 8004258:	f024 0403 	bic.w	r4, r4, #3
 800425c:	42a0      	cmp	r0, r4
 800425e:	d007      	beq.n	8004270 <sbrk_aligned+0x38>
 8004260:	1a21      	subs	r1, r4, r0
 8004262:	4628      	mov	r0, r5
 8004264:	f000 fcc6 	bl	8004bf4 <_sbrk_r>
 8004268:	3001      	adds	r0, #1
 800426a:	d101      	bne.n	8004270 <sbrk_aligned+0x38>
 800426c:	f04f 34ff 	mov.w	r4, #4294967295
 8004270:	4620      	mov	r0, r4
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	20003de0 	.word	0x20003de0

08004278 <_malloc_r>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	1ccd      	adds	r5, r1, #3
 800427e:	f025 0503 	bic.w	r5, r5, #3
 8004282:	3508      	adds	r5, #8
 8004284:	2d0c      	cmp	r5, #12
 8004286:	bf38      	it	cc
 8004288:	250c      	movcc	r5, #12
 800428a:	2d00      	cmp	r5, #0
 800428c:	4607      	mov	r7, r0
 800428e:	db01      	blt.n	8004294 <_malloc_r+0x1c>
 8004290:	42a9      	cmp	r1, r5
 8004292:	d905      	bls.n	80042a0 <_malloc_r+0x28>
 8004294:	230c      	movs	r3, #12
 8004296:	2600      	movs	r6, #0
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4630      	mov	r0, r6
 800429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a0:	4e2e      	ldr	r6, [pc, #184]	; (800435c <_malloc_r+0xe4>)
 80042a2:	f000 ffc3 	bl	800522c <__malloc_lock>
 80042a6:	6833      	ldr	r3, [r6, #0]
 80042a8:	461c      	mov	r4, r3
 80042aa:	bb34      	cbnz	r4, 80042fa <_malloc_r+0x82>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4638      	mov	r0, r7
 80042b0:	f7ff ffc2 	bl	8004238 <sbrk_aligned>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	4604      	mov	r4, r0
 80042b8:	d14d      	bne.n	8004356 <_malloc_r+0xde>
 80042ba:	6834      	ldr	r4, [r6, #0]
 80042bc:	4626      	mov	r6, r4
 80042be:	2e00      	cmp	r6, #0
 80042c0:	d140      	bne.n	8004344 <_malloc_r+0xcc>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	4631      	mov	r1, r6
 80042c6:	4638      	mov	r0, r7
 80042c8:	eb04 0803 	add.w	r8, r4, r3
 80042cc:	f000 fc92 	bl	8004bf4 <_sbrk_r>
 80042d0:	4580      	cmp	r8, r0
 80042d2:	d13a      	bne.n	800434a <_malloc_r+0xd2>
 80042d4:	6821      	ldr	r1, [r4, #0]
 80042d6:	3503      	adds	r5, #3
 80042d8:	1a6d      	subs	r5, r5, r1
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	4638      	mov	r0, r7
 80042e8:	4629      	mov	r1, r5
 80042ea:	f7ff ffa5 	bl	8004238 <sbrk_aligned>
 80042ee:	3001      	adds	r0, #1
 80042f0:	d02b      	beq.n	800434a <_malloc_r+0xd2>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	442b      	add	r3, r5
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	e00e      	b.n	8004318 <_malloc_r+0xa0>
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	1b52      	subs	r2, r2, r5
 80042fe:	d41e      	bmi.n	800433e <_malloc_r+0xc6>
 8004300:	2a0b      	cmp	r2, #11
 8004302:	d916      	bls.n	8004332 <_malloc_r+0xba>
 8004304:	1961      	adds	r1, r4, r5
 8004306:	42a3      	cmp	r3, r4
 8004308:	6025      	str	r5, [r4, #0]
 800430a:	bf18      	it	ne
 800430c:	6059      	strne	r1, [r3, #4]
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	bf08      	it	eq
 8004312:	6031      	streq	r1, [r6, #0]
 8004314:	5162      	str	r2, [r4, r5]
 8004316:	604b      	str	r3, [r1, #4]
 8004318:	4638      	mov	r0, r7
 800431a:	f104 060b 	add.w	r6, r4, #11
 800431e:	f000 ff8b 	bl	8005238 <__malloc_unlock>
 8004322:	f026 0607 	bic.w	r6, r6, #7
 8004326:	1d23      	adds	r3, r4, #4
 8004328:	1af2      	subs	r2, r6, r3
 800432a:	d0b6      	beq.n	800429a <_malloc_r+0x22>
 800432c:	1b9b      	subs	r3, r3, r6
 800432e:	50a3      	str	r3, [r4, r2]
 8004330:	e7b3      	b.n	800429a <_malloc_r+0x22>
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	bf0c      	ite	eq
 8004338:	6032      	streq	r2, [r6, #0]
 800433a:	605a      	strne	r2, [r3, #4]
 800433c:	e7ec      	b.n	8004318 <_malloc_r+0xa0>
 800433e:	4623      	mov	r3, r4
 8004340:	6864      	ldr	r4, [r4, #4]
 8004342:	e7b2      	b.n	80042aa <_malloc_r+0x32>
 8004344:	4634      	mov	r4, r6
 8004346:	6876      	ldr	r6, [r6, #4]
 8004348:	e7b9      	b.n	80042be <_malloc_r+0x46>
 800434a:	230c      	movs	r3, #12
 800434c:	4638      	mov	r0, r7
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	f000 ff72 	bl	8005238 <__malloc_unlock>
 8004354:	e7a1      	b.n	800429a <_malloc_r+0x22>
 8004356:	6025      	str	r5, [r4, #0]
 8004358:	e7de      	b.n	8004318 <_malloc_r+0xa0>
 800435a:	bf00      	nop
 800435c:	20003ddc 	.word	0x20003ddc

08004360 <__ssputs_r>:
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	688e      	ldr	r6, [r1, #8]
 8004366:	4682      	mov	sl, r0
 8004368:	429e      	cmp	r6, r3
 800436a:	460c      	mov	r4, r1
 800436c:	4690      	mov	r8, r2
 800436e:	461f      	mov	r7, r3
 8004370:	d838      	bhi.n	80043e4 <__ssputs_r+0x84>
 8004372:	898a      	ldrh	r2, [r1, #12]
 8004374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004378:	d032      	beq.n	80043e0 <__ssputs_r+0x80>
 800437a:	6825      	ldr	r5, [r4, #0]
 800437c:	6909      	ldr	r1, [r1, #16]
 800437e:	3301      	adds	r3, #1
 8004380:	eba5 0901 	sub.w	r9, r5, r1
 8004384:	6965      	ldr	r5, [r4, #20]
 8004386:	444b      	add	r3, r9
 8004388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800438c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004390:	106d      	asrs	r5, r5, #1
 8004392:	429d      	cmp	r5, r3
 8004394:	bf38      	it	cc
 8004396:	461d      	movcc	r5, r3
 8004398:	0553      	lsls	r3, r2, #21
 800439a:	d531      	bpl.n	8004400 <__ssputs_r+0xa0>
 800439c:	4629      	mov	r1, r5
 800439e:	f7ff ff6b 	bl	8004278 <_malloc_r>
 80043a2:	4606      	mov	r6, r0
 80043a4:	b950      	cbnz	r0, 80043bc <__ssputs_r+0x5c>
 80043a6:	230c      	movs	r3, #12
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	f8ca 3000 	str.w	r3, [sl]
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043bc:	464a      	mov	r2, r9
 80043be:	6921      	ldr	r1, [r4, #16]
 80043c0:	f7ff fe46 	bl	8004050 <memcpy>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	6126      	str	r6, [r4, #16]
 80043d2:	444e      	add	r6, r9
 80043d4:	6026      	str	r6, [r4, #0]
 80043d6:	463e      	mov	r6, r7
 80043d8:	6165      	str	r5, [r4, #20]
 80043da:	eba5 0509 	sub.w	r5, r5, r9
 80043de:	60a5      	str	r5, [r4, #8]
 80043e0:	42be      	cmp	r6, r7
 80043e2:	d900      	bls.n	80043e6 <__ssputs_r+0x86>
 80043e4:	463e      	mov	r6, r7
 80043e6:	4632      	mov	r2, r6
 80043e8:	4641      	mov	r1, r8
 80043ea:	6820      	ldr	r0, [r4, #0]
 80043ec:	f000 ff04 	bl	80051f8 <memmove>
 80043f0:	68a3      	ldr	r3, [r4, #8]
 80043f2:	2000      	movs	r0, #0
 80043f4:	1b9b      	subs	r3, r3, r6
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	4433      	add	r3, r6
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	e7db      	b.n	80043b8 <__ssputs_r+0x58>
 8004400:	462a      	mov	r2, r5
 8004402:	f000 ff1f 	bl	8005244 <_realloc_r>
 8004406:	4606      	mov	r6, r0
 8004408:	2800      	cmp	r0, #0
 800440a:	d1e1      	bne.n	80043d0 <__ssputs_r+0x70>
 800440c:	4650      	mov	r0, sl
 800440e:	6921      	ldr	r1, [r4, #16]
 8004410:	f7ff feca 	bl	80041a8 <_free_r>
 8004414:	e7c7      	b.n	80043a6 <__ssputs_r+0x46>
	...

08004418 <_svfiprintf_r>:
 8004418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441c:	4698      	mov	r8, r3
 800441e:	898b      	ldrh	r3, [r1, #12]
 8004420:	4607      	mov	r7, r0
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	460d      	mov	r5, r1
 8004426:	4614      	mov	r4, r2
 8004428:	b09d      	sub	sp, #116	; 0x74
 800442a:	d50e      	bpl.n	800444a <_svfiprintf_r+0x32>
 800442c:	690b      	ldr	r3, [r1, #16]
 800442e:	b963      	cbnz	r3, 800444a <_svfiprintf_r+0x32>
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	f7ff ff21 	bl	8004278 <_malloc_r>
 8004436:	6028      	str	r0, [r5, #0]
 8004438:	6128      	str	r0, [r5, #16]
 800443a:	b920      	cbnz	r0, 8004446 <_svfiprintf_r+0x2e>
 800443c:	230c      	movs	r3, #12
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	e0d1      	b.n	80045ea <_svfiprintf_r+0x1d2>
 8004446:	2340      	movs	r3, #64	; 0x40
 8004448:	616b      	str	r3, [r5, #20]
 800444a:	2300      	movs	r3, #0
 800444c:	9309      	str	r3, [sp, #36]	; 0x24
 800444e:	2320      	movs	r3, #32
 8004450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004454:	2330      	movs	r3, #48	; 0x30
 8004456:	f04f 0901 	mov.w	r9, #1
 800445a:	f8cd 800c 	str.w	r8, [sp, #12]
 800445e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004604 <_svfiprintf_r+0x1ec>
 8004462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004466:	4623      	mov	r3, r4
 8004468:	469a      	mov	sl, r3
 800446a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800446e:	b10a      	cbz	r2, 8004474 <_svfiprintf_r+0x5c>
 8004470:	2a25      	cmp	r2, #37	; 0x25
 8004472:	d1f9      	bne.n	8004468 <_svfiprintf_r+0x50>
 8004474:	ebba 0b04 	subs.w	fp, sl, r4
 8004478:	d00b      	beq.n	8004492 <_svfiprintf_r+0x7a>
 800447a:	465b      	mov	r3, fp
 800447c:	4622      	mov	r2, r4
 800447e:	4629      	mov	r1, r5
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff ff6d 	bl	8004360 <__ssputs_r>
 8004486:	3001      	adds	r0, #1
 8004488:	f000 80aa 	beq.w	80045e0 <_svfiprintf_r+0x1c8>
 800448c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800448e:	445a      	add	r2, fp
 8004490:	9209      	str	r2, [sp, #36]	; 0x24
 8004492:	f89a 3000 	ldrb.w	r3, [sl]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80a2 	beq.w	80045e0 <_svfiprintf_r+0x1c8>
 800449c:	2300      	movs	r3, #0
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a6:	f10a 0a01 	add.w	sl, sl, #1
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	9307      	str	r3, [sp, #28]
 80044ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b2:	931a      	str	r3, [sp, #104]	; 0x68
 80044b4:	4654      	mov	r4, sl
 80044b6:	2205      	movs	r2, #5
 80044b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044bc:	4851      	ldr	r0, [pc, #324]	; (8004604 <_svfiprintf_r+0x1ec>)
 80044be:	f000 fe8d 	bl	80051dc <memchr>
 80044c2:	9a04      	ldr	r2, [sp, #16]
 80044c4:	b9d8      	cbnz	r0, 80044fe <_svfiprintf_r+0xe6>
 80044c6:	06d0      	lsls	r0, r2, #27
 80044c8:	bf44      	itt	mi
 80044ca:	2320      	movmi	r3, #32
 80044cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d0:	0711      	lsls	r1, r2, #28
 80044d2:	bf44      	itt	mi
 80044d4:	232b      	movmi	r3, #43	; 0x2b
 80044d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044da:	f89a 3000 	ldrb.w	r3, [sl]
 80044de:	2b2a      	cmp	r3, #42	; 0x2a
 80044e0:	d015      	beq.n	800450e <_svfiprintf_r+0xf6>
 80044e2:	4654      	mov	r4, sl
 80044e4:	2000      	movs	r0, #0
 80044e6:	f04f 0c0a 	mov.w	ip, #10
 80044ea:	9a07      	ldr	r2, [sp, #28]
 80044ec:	4621      	mov	r1, r4
 80044ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f2:	3b30      	subs	r3, #48	; 0x30
 80044f4:	2b09      	cmp	r3, #9
 80044f6:	d94e      	bls.n	8004596 <_svfiprintf_r+0x17e>
 80044f8:	b1b0      	cbz	r0, 8004528 <_svfiprintf_r+0x110>
 80044fa:	9207      	str	r2, [sp, #28]
 80044fc:	e014      	b.n	8004528 <_svfiprintf_r+0x110>
 80044fe:	eba0 0308 	sub.w	r3, r0, r8
 8004502:	fa09 f303 	lsl.w	r3, r9, r3
 8004506:	4313      	orrs	r3, r2
 8004508:	46a2      	mov	sl, r4
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	e7d2      	b.n	80044b4 <_svfiprintf_r+0x9c>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d19      	adds	r1, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfbb      	ittet	lt
 800451a:	425b      	neglt	r3, r3
 800451c:	f042 0202 	orrlt.w	r2, r2, #2
 8004520:	9307      	strge	r3, [sp, #28]
 8004522:	9307      	strlt	r3, [sp, #28]
 8004524:	bfb8      	it	lt
 8004526:	9204      	strlt	r2, [sp, #16]
 8004528:	7823      	ldrb	r3, [r4, #0]
 800452a:	2b2e      	cmp	r3, #46	; 0x2e
 800452c:	d10c      	bne.n	8004548 <_svfiprintf_r+0x130>
 800452e:	7863      	ldrb	r3, [r4, #1]
 8004530:	2b2a      	cmp	r3, #42	; 0x2a
 8004532:	d135      	bne.n	80045a0 <_svfiprintf_r+0x188>
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	3402      	adds	r4, #2
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9203      	str	r2, [sp, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfb8      	it	lt
 8004542:	f04f 33ff 	movlt.w	r3, #4294967295
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004608 <_svfiprintf_r+0x1f0>
 800454c:	2203      	movs	r2, #3
 800454e:	4650      	mov	r0, sl
 8004550:	7821      	ldrb	r1, [r4, #0]
 8004552:	f000 fe43 	bl	80051dc <memchr>
 8004556:	b140      	cbz	r0, 800456a <_svfiprintf_r+0x152>
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	eba0 000a 	sub.w	r0, r0, sl
 800455e:	fa03 f000 	lsl.w	r0, r3, r0
 8004562:	9b04      	ldr	r3, [sp, #16]
 8004564:	3401      	adds	r4, #1
 8004566:	4303      	orrs	r3, r0
 8004568:	9304      	str	r3, [sp, #16]
 800456a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456e:	2206      	movs	r2, #6
 8004570:	4826      	ldr	r0, [pc, #152]	; (800460c <_svfiprintf_r+0x1f4>)
 8004572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004576:	f000 fe31 	bl	80051dc <memchr>
 800457a:	2800      	cmp	r0, #0
 800457c:	d038      	beq.n	80045f0 <_svfiprintf_r+0x1d8>
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <_svfiprintf_r+0x1f8>)
 8004580:	bb1b      	cbnz	r3, 80045ca <_svfiprintf_r+0x1b2>
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	3307      	adds	r3, #7
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	3308      	adds	r3, #8
 800458c:	9303      	str	r3, [sp, #12]
 800458e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004590:	4433      	add	r3, r6
 8004592:	9309      	str	r3, [sp, #36]	; 0x24
 8004594:	e767      	b.n	8004466 <_svfiprintf_r+0x4e>
 8004596:	460c      	mov	r4, r1
 8004598:	2001      	movs	r0, #1
 800459a:	fb0c 3202 	mla	r2, ip, r2, r3
 800459e:	e7a5      	b.n	80044ec <_svfiprintf_r+0xd4>
 80045a0:	2300      	movs	r3, #0
 80045a2:	f04f 0c0a 	mov.w	ip, #10
 80045a6:	4619      	mov	r1, r3
 80045a8:	3401      	adds	r4, #1
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	4620      	mov	r0, r4
 80045ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045b2:	3a30      	subs	r2, #48	; 0x30
 80045b4:	2a09      	cmp	r2, #9
 80045b6:	d903      	bls.n	80045c0 <_svfiprintf_r+0x1a8>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0c5      	beq.n	8004548 <_svfiprintf_r+0x130>
 80045bc:	9105      	str	r1, [sp, #20]
 80045be:	e7c3      	b.n	8004548 <_svfiprintf_r+0x130>
 80045c0:	4604      	mov	r4, r0
 80045c2:	2301      	movs	r3, #1
 80045c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045c8:	e7f0      	b.n	80045ac <_svfiprintf_r+0x194>
 80045ca:	ab03      	add	r3, sp, #12
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	462a      	mov	r2, r5
 80045d0:	4638      	mov	r0, r7
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <_svfiprintf_r+0x1fc>)
 80045d4:	a904      	add	r1, sp, #16
 80045d6:	f3af 8000 	nop.w
 80045da:	1c42      	adds	r2, r0, #1
 80045dc:	4606      	mov	r6, r0
 80045de:	d1d6      	bne.n	800458e <_svfiprintf_r+0x176>
 80045e0:	89ab      	ldrh	r3, [r5, #12]
 80045e2:	065b      	lsls	r3, r3, #25
 80045e4:	f53f af2c 	bmi.w	8004440 <_svfiprintf_r+0x28>
 80045e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ea:	b01d      	add	sp, #116	; 0x74
 80045ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f0:	ab03      	add	r3, sp, #12
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	462a      	mov	r2, r5
 80045f6:	4638      	mov	r0, r7
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <_svfiprintf_r+0x1fc>)
 80045fa:	a904      	add	r1, sp, #16
 80045fc:	f000 f9d4 	bl	80049a8 <_printf_i>
 8004600:	e7eb      	b.n	80045da <_svfiprintf_r+0x1c2>
 8004602:	bf00      	nop
 8004604:	08005d12 	.word	0x08005d12
 8004608:	08005d18 	.word	0x08005d18
 800460c:	08005d1c 	.word	0x08005d1c
 8004610:	00000000 	.word	0x00000000
 8004614:	08004361 	.word	0x08004361

08004618 <__sfputc_r>:
 8004618:	6893      	ldr	r3, [r2, #8]
 800461a:	b410      	push	{r4}
 800461c:	3b01      	subs	r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	6093      	str	r3, [r2, #8]
 8004622:	da07      	bge.n	8004634 <__sfputc_r+0x1c>
 8004624:	6994      	ldr	r4, [r2, #24]
 8004626:	42a3      	cmp	r3, r4
 8004628:	db01      	blt.n	800462e <__sfputc_r+0x16>
 800462a:	290a      	cmp	r1, #10
 800462c:	d102      	bne.n	8004634 <__sfputc_r+0x1c>
 800462e:	bc10      	pop	{r4}
 8004630:	f000 baf0 	b.w	8004c14 <__swbuf_r>
 8004634:	6813      	ldr	r3, [r2, #0]
 8004636:	1c58      	adds	r0, r3, #1
 8004638:	6010      	str	r0, [r2, #0]
 800463a:	7019      	strb	r1, [r3, #0]
 800463c:	4608      	mov	r0, r1
 800463e:	bc10      	pop	{r4}
 8004640:	4770      	bx	lr

08004642 <__sfputs_r>:
 8004642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
 8004648:	4614      	mov	r4, r2
 800464a:	18d5      	adds	r5, r2, r3
 800464c:	42ac      	cmp	r4, r5
 800464e:	d101      	bne.n	8004654 <__sfputs_r+0x12>
 8004650:	2000      	movs	r0, #0
 8004652:	e007      	b.n	8004664 <__sfputs_r+0x22>
 8004654:	463a      	mov	r2, r7
 8004656:	4630      	mov	r0, r6
 8004658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465c:	f7ff ffdc 	bl	8004618 <__sfputc_r>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d1f3      	bne.n	800464c <__sfputs_r+0xa>
 8004664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004668 <_vfiprintf_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	460d      	mov	r5, r1
 800466e:	4614      	mov	r4, r2
 8004670:	4698      	mov	r8, r3
 8004672:	4606      	mov	r6, r0
 8004674:	b09d      	sub	sp, #116	; 0x74
 8004676:	b118      	cbz	r0, 8004680 <_vfiprintf_r+0x18>
 8004678:	6983      	ldr	r3, [r0, #24]
 800467a:	b90b      	cbnz	r3, 8004680 <_vfiprintf_r+0x18>
 800467c:	f000 fca8 	bl	8004fd0 <__sinit>
 8004680:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <_vfiprintf_r+0x240>)
 8004682:	429d      	cmp	r5, r3
 8004684:	d11b      	bne.n	80046be <_vfiprintf_r+0x56>
 8004686:	6875      	ldr	r5, [r6, #4]
 8004688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	d405      	bmi.n	800469a <_vfiprintf_r+0x32>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d402      	bmi.n	800469a <_vfiprintf_r+0x32>
 8004694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004696:	f000 fd39 	bl	800510c <__retarget_lock_acquire_recursive>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	d501      	bpl.n	80046a4 <_vfiprintf_r+0x3c>
 80046a0:	692b      	ldr	r3, [r5, #16]
 80046a2:	b9eb      	cbnz	r3, 80046e0 <_vfiprintf_r+0x78>
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 fb06 	bl	8004cb8 <__swsetup_r>
 80046ac:	b1c0      	cbz	r0, 80046e0 <_vfiprintf_r+0x78>
 80046ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b0:	07dc      	lsls	r4, r3, #31
 80046b2:	d50e      	bpl.n	80046d2 <_vfiprintf_r+0x6a>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	b01d      	add	sp, #116	; 0x74
 80046ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046be:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <_vfiprintf_r+0x244>)
 80046c0:	429d      	cmp	r5, r3
 80046c2:	d101      	bne.n	80046c8 <_vfiprintf_r+0x60>
 80046c4:	68b5      	ldr	r5, [r6, #8]
 80046c6:	e7df      	b.n	8004688 <_vfiprintf_r+0x20>
 80046c8:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <_vfiprintf_r+0x248>)
 80046ca:	429d      	cmp	r5, r3
 80046cc:	bf08      	it	eq
 80046ce:	68f5      	ldreq	r5, [r6, #12]
 80046d0:	e7da      	b.n	8004688 <_vfiprintf_r+0x20>
 80046d2:	89ab      	ldrh	r3, [r5, #12]
 80046d4:	0598      	lsls	r0, r3, #22
 80046d6:	d4ed      	bmi.n	80046b4 <_vfiprintf_r+0x4c>
 80046d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046da:	f000 fd18 	bl	800510e <__retarget_lock_release_recursive>
 80046de:	e7e9      	b.n	80046b4 <_vfiprintf_r+0x4c>
 80046e0:	2300      	movs	r3, #0
 80046e2:	9309      	str	r3, [sp, #36]	; 0x24
 80046e4:	2320      	movs	r3, #32
 80046e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ea:	2330      	movs	r3, #48	; 0x30
 80046ec:	f04f 0901 	mov.w	r9, #1
 80046f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80048b4 <_vfiprintf_r+0x24c>
 80046f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046fc:	4623      	mov	r3, r4
 80046fe:	469a      	mov	sl, r3
 8004700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004704:	b10a      	cbz	r2, 800470a <_vfiprintf_r+0xa2>
 8004706:	2a25      	cmp	r2, #37	; 0x25
 8004708:	d1f9      	bne.n	80046fe <_vfiprintf_r+0x96>
 800470a:	ebba 0b04 	subs.w	fp, sl, r4
 800470e:	d00b      	beq.n	8004728 <_vfiprintf_r+0xc0>
 8004710:	465b      	mov	r3, fp
 8004712:	4622      	mov	r2, r4
 8004714:	4629      	mov	r1, r5
 8004716:	4630      	mov	r0, r6
 8004718:	f7ff ff93 	bl	8004642 <__sfputs_r>
 800471c:	3001      	adds	r0, #1
 800471e:	f000 80aa 	beq.w	8004876 <_vfiprintf_r+0x20e>
 8004722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004724:	445a      	add	r2, fp
 8004726:	9209      	str	r2, [sp, #36]	; 0x24
 8004728:	f89a 3000 	ldrb.w	r3, [sl]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a2 	beq.w	8004876 <_vfiprintf_r+0x20e>
 8004732:	2300      	movs	r3, #0
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473c:	f10a 0a01 	add.w	sl, sl, #1
 8004740:	9304      	str	r3, [sp, #16]
 8004742:	9307      	str	r3, [sp, #28]
 8004744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004748:	931a      	str	r3, [sp, #104]	; 0x68
 800474a:	4654      	mov	r4, sl
 800474c:	2205      	movs	r2, #5
 800474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004752:	4858      	ldr	r0, [pc, #352]	; (80048b4 <_vfiprintf_r+0x24c>)
 8004754:	f000 fd42 	bl	80051dc <memchr>
 8004758:	9a04      	ldr	r2, [sp, #16]
 800475a:	b9d8      	cbnz	r0, 8004794 <_vfiprintf_r+0x12c>
 800475c:	06d1      	lsls	r1, r2, #27
 800475e:	bf44      	itt	mi
 8004760:	2320      	movmi	r3, #32
 8004762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004766:	0713      	lsls	r3, r2, #28
 8004768:	bf44      	itt	mi
 800476a:	232b      	movmi	r3, #43	; 0x2b
 800476c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004770:	f89a 3000 	ldrb.w	r3, [sl]
 8004774:	2b2a      	cmp	r3, #42	; 0x2a
 8004776:	d015      	beq.n	80047a4 <_vfiprintf_r+0x13c>
 8004778:	4654      	mov	r4, sl
 800477a:	2000      	movs	r0, #0
 800477c:	f04f 0c0a 	mov.w	ip, #10
 8004780:	9a07      	ldr	r2, [sp, #28]
 8004782:	4621      	mov	r1, r4
 8004784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004788:	3b30      	subs	r3, #48	; 0x30
 800478a:	2b09      	cmp	r3, #9
 800478c:	d94e      	bls.n	800482c <_vfiprintf_r+0x1c4>
 800478e:	b1b0      	cbz	r0, 80047be <_vfiprintf_r+0x156>
 8004790:	9207      	str	r2, [sp, #28]
 8004792:	e014      	b.n	80047be <_vfiprintf_r+0x156>
 8004794:	eba0 0308 	sub.w	r3, r0, r8
 8004798:	fa09 f303 	lsl.w	r3, r9, r3
 800479c:	4313      	orrs	r3, r2
 800479e:	46a2      	mov	sl, r4
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	e7d2      	b.n	800474a <_vfiprintf_r+0xe2>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	1d19      	adds	r1, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	9103      	str	r1, [sp, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bfbb      	ittet	lt
 80047b0:	425b      	neglt	r3, r3
 80047b2:	f042 0202 	orrlt.w	r2, r2, #2
 80047b6:	9307      	strge	r3, [sp, #28]
 80047b8:	9307      	strlt	r3, [sp, #28]
 80047ba:	bfb8      	it	lt
 80047bc:	9204      	strlt	r2, [sp, #16]
 80047be:	7823      	ldrb	r3, [r4, #0]
 80047c0:	2b2e      	cmp	r3, #46	; 0x2e
 80047c2:	d10c      	bne.n	80047de <_vfiprintf_r+0x176>
 80047c4:	7863      	ldrb	r3, [r4, #1]
 80047c6:	2b2a      	cmp	r3, #42	; 0x2a
 80047c8:	d135      	bne.n	8004836 <_vfiprintf_r+0x1ce>
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	3402      	adds	r4, #2
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bfb8      	it	lt
 80047d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80048b8 <_vfiprintf_r+0x250>
 80047e2:	2203      	movs	r2, #3
 80047e4:	4650      	mov	r0, sl
 80047e6:	7821      	ldrb	r1, [r4, #0]
 80047e8:	f000 fcf8 	bl	80051dc <memchr>
 80047ec:	b140      	cbz	r0, 8004800 <_vfiprintf_r+0x198>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	eba0 000a 	sub.w	r0, r0, sl
 80047f4:	fa03 f000 	lsl.w	r0, r3, r0
 80047f8:	9b04      	ldr	r3, [sp, #16]
 80047fa:	3401      	adds	r4, #1
 80047fc:	4303      	orrs	r3, r0
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004804:	2206      	movs	r2, #6
 8004806:	482d      	ldr	r0, [pc, #180]	; (80048bc <_vfiprintf_r+0x254>)
 8004808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800480c:	f000 fce6 	bl	80051dc <memchr>
 8004810:	2800      	cmp	r0, #0
 8004812:	d03f      	beq.n	8004894 <_vfiprintf_r+0x22c>
 8004814:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <_vfiprintf_r+0x258>)
 8004816:	bb1b      	cbnz	r3, 8004860 <_vfiprintf_r+0x1f8>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	3307      	adds	r3, #7
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	3308      	adds	r3, #8
 8004822:	9303      	str	r3, [sp, #12]
 8004824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004826:	443b      	add	r3, r7
 8004828:	9309      	str	r3, [sp, #36]	; 0x24
 800482a:	e767      	b.n	80046fc <_vfiprintf_r+0x94>
 800482c:	460c      	mov	r4, r1
 800482e:	2001      	movs	r0, #1
 8004830:	fb0c 3202 	mla	r2, ip, r2, r3
 8004834:	e7a5      	b.n	8004782 <_vfiprintf_r+0x11a>
 8004836:	2300      	movs	r3, #0
 8004838:	f04f 0c0a 	mov.w	ip, #10
 800483c:	4619      	mov	r1, r3
 800483e:	3401      	adds	r4, #1
 8004840:	9305      	str	r3, [sp, #20]
 8004842:	4620      	mov	r0, r4
 8004844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004848:	3a30      	subs	r2, #48	; 0x30
 800484a:	2a09      	cmp	r2, #9
 800484c:	d903      	bls.n	8004856 <_vfiprintf_r+0x1ee>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0c5      	beq.n	80047de <_vfiprintf_r+0x176>
 8004852:	9105      	str	r1, [sp, #20]
 8004854:	e7c3      	b.n	80047de <_vfiprintf_r+0x176>
 8004856:	4604      	mov	r4, r0
 8004858:	2301      	movs	r3, #1
 800485a:	fb0c 2101 	mla	r1, ip, r1, r2
 800485e:	e7f0      	b.n	8004842 <_vfiprintf_r+0x1da>
 8004860:	ab03      	add	r3, sp, #12
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	462a      	mov	r2, r5
 8004866:	4630      	mov	r0, r6
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <_vfiprintf_r+0x25c>)
 800486a:	a904      	add	r1, sp, #16
 800486c:	f3af 8000 	nop.w
 8004870:	4607      	mov	r7, r0
 8004872:	1c78      	adds	r0, r7, #1
 8004874:	d1d6      	bne.n	8004824 <_vfiprintf_r+0x1bc>
 8004876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004878:	07d9      	lsls	r1, r3, #31
 800487a:	d405      	bmi.n	8004888 <_vfiprintf_r+0x220>
 800487c:	89ab      	ldrh	r3, [r5, #12]
 800487e:	059a      	lsls	r2, r3, #22
 8004880:	d402      	bmi.n	8004888 <_vfiprintf_r+0x220>
 8004882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004884:	f000 fc43 	bl	800510e <__retarget_lock_release_recursive>
 8004888:	89ab      	ldrh	r3, [r5, #12]
 800488a:	065b      	lsls	r3, r3, #25
 800488c:	f53f af12 	bmi.w	80046b4 <_vfiprintf_r+0x4c>
 8004890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004892:	e711      	b.n	80046b8 <_vfiprintf_r+0x50>
 8004894:	ab03      	add	r3, sp, #12
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	462a      	mov	r2, r5
 800489a:	4630      	mov	r0, r6
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <_vfiprintf_r+0x25c>)
 800489e:	a904      	add	r1, sp, #16
 80048a0:	f000 f882 	bl	80049a8 <_printf_i>
 80048a4:	e7e4      	b.n	8004870 <_vfiprintf_r+0x208>
 80048a6:	bf00      	nop
 80048a8:	08005d68 	.word	0x08005d68
 80048ac:	08005d88 	.word	0x08005d88
 80048b0:	08005d48 	.word	0x08005d48
 80048b4:	08005d12 	.word	0x08005d12
 80048b8:	08005d18 	.word	0x08005d18
 80048bc:	08005d1c 	.word	0x08005d1c
 80048c0:	00000000 	.word	0x00000000
 80048c4:	08004643 	.word	0x08004643

080048c8 <_printf_common>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	4616      	mov	r6, r2
 80048ce:	4699      	mov	r9, r3
 80048d0:	688a      	ldr	r2, [r1, #8]
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	4607      	mov	r7, r0
 80048d6:	4293      	cmp	r3, r2
 80048d8:	bfb8      	it	lt
 80048da:	4613      	movlt	r3, r2
 80048dc:	6033      	str	r3, [r6, #0]
 80048de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e2:	460c      	mov	r4, r1
 80048e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048e8:	b10a      	cbz	r2, 80048ee <_printf_common+0x26>
 80048ea:	3301      	adds	r3, #1
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	0699      	lsls	r1, r3, #26
 80048f2:	bf42      	ittt	mi
 80048f4:	6833      	ldrmi	r3, [r6, #0]
 80048f6:	3302      	addmi	r3, #2
 80048f8:	6033      	strmi	r3, [r6, #0]
 80048fa:	6825      	ldr	r5, [r4, #0]
 80048fc:	f015 0506 	ands.w	r5, r5, #6
 8004900:	d106      	bne.n	8004910 <_printf_common+0x48>
 8004902:	f104 0a19 	add.w	sl, r4, #25
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	6832      	ldr	r2, [r6, #0]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	42ab      	cmp	r3, r5
 800490e:	dc28      	bgt.n	8004962 <_printf_common+0x9a>
 8004910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004914:	1e13      	subs	r3, r2, #0
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	bf18      	it	ne
 800491a:	2301      	movne	r3, #1
 800491c:	0692      	lsls	r2, r2, #26
 800491e:	d42d      	bmi.n	800497c <_printf_common+0xb4>
 8004920:	4649      	mov	r1, r9
 8004922:	4638      	mov	r0, r7
 8004924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d020      	beq.n	8004970 <_printf_common+0xa8>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	68e5      	ldr	r5, [r4, #12]
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	2b04      	cmp	r3, #4
 8004938:	bf18      	it	ne
 800493a:	2500      	movne	r5, #0
 800493c:	6832      	ldr	r2, [r6, #0]
 800493e:	f04f 0600 	mov.w	r6, #0
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	bf08      	it	eq
 8004946:	1aad      	subeq	r5, r5, r2
 8004948:	6922      	ldr	r2, [r4, #16]
 800494a:	bf08      	it	eq
 800494c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004950:	4293      	cmp	r3, r2
 8004952:	bfc4      	itt	gt
 8004954:	1a9b      	subgt	r3, r3, r2
 8004956:	18ed      	addgt	r5, r5, r3
 8004958:	341a      	adds	r4, #26
 800495a:	42b5      	cmp	r5, r6
 800495c:	d11a      	bne.n	8004994 <_printf_common+0xcc>
 800495e:	2000      	movs	r0, #0
 8004960:	e008      	b.n	8004974 <_printf_common+0xac>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4649      	mov	r1, r9
 8004968:	4638      	mov	r0, r7
 800496a:	47c0      	blx	r8
 800496c:	3001      	adds	r0, #1
 800496e:	d103      	bne.n	8004978 <_printf_common+0xb0>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	3501      	adds	r5, #1
 800497a:	e7c4      	b.n	8004906 <_printf_common+0x3e>
 800497c:	2030      	movs	r0, #48	; 0x30
 800497e:	18e1      	adds	r1, r4, r3
 8004980:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800498a:	4422      	add	r2, r4
 800498c:	3302      	adds	r3, #2
 800498e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004992:	e7c5      	b.n	8004920 <_printf_common+0x58>
 8004994:	2301      	movs	r3, #1
 8004996:	4622      	mov	r2, r4
 8004998:	4649      	mov	r1, r9
 800499a:	4638      	mov	r0, r7
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d0e6      	beq.n	8004970 <_printf_common+0xa8>
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7d9      	b.n	800495a <_printf_common+0x92>
	...

080049a8 <_printf_i>:
 80049a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	7e0f      	ldrb	r7, [r1, #24]
 80049ae:	4691      	mov	r9, r2
 80049b0:	2f78      	cmp	r7, #120	; 0x78
 80049b2:	4680      	mov	r8, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	469a      	mov	sl, r3
 80049b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049be:	d807      	bhi.n	80049d0 <_printf_i+0x28>
 80049c0:	2f62      	cmp	r7, #98	; 0x62
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x32>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 80d9 	beq.w	8004b7c <_printf_i+0x1d4>
 80049ca:	2f58      	cmp	r7, #88	; 0x58
 80049cc:	f000 80a4 	beq.w	8004b18 <_printf_i+0x170>
 80049d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d8:	e03a      	b.n	8004a50 <_printf_i+0xa8>
 80049da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049de:	2b15      	cmp	r3, #21
 80049e0:	d8f6      	bhi.n	80049d0 <_printf_i+0x28>
 80049e2:	a101      	add	r1, pc, #4	; (adr r1, 80049e8 <_printf_i+0x40>)
 80049e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	080049d1 	.word	0x080049d1
 80049f4:	080049d1 	.word	0x080049d1
 80049f8:	080049d1 	.word	0x080049d1
 80049fc:	080049d1 	.word	0x080049d1
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	080049d1 	.word	0x080049d1
 8004a08:	080049d1 	.word	0x080049d1
 8004a0c:	080049d1 	.word	0x080049d1
 8004a10:	080049d1 	.word	0x080049d1
 8004a14:	08004b63 	.word	0x08004b63
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004b45 	.word	0x08004b45
 8004a20:	080049d1 	.word	0x080049d1
 8004a24:	080049d1 	.word	0x080049d1
 8004a28:	08004b85 	.word	0x08004b85
 8004a2c:	080049d1 	.word	0x080049d1
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	080049d1 	.word	0x080049d1
 8004a38:	080049d1 	.word	0x080049d1
 8004a3c:	08004b4d 	.word	0x08004b4d
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0a4      	b.n	8004b9e <_printf_i+0x1f6>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	6829      	ldr	r1, [r5, #0]
 8004a58:	0606      	lsls	r6, r0, #24
 8004a5a:	f101 0304 	add.w	r3, r1, #4
 8004a5e:	d50a      	bpl.n	8004a76 <_printf_i+0xce>
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	2e00      	cmp	r6, #0
 8004a66:	da03      	bge.n	8004a70 <_printf_i+0xc8>
 8004a68:	232d      	movs	r3, #45	; 0x2d
 8004a6a:	4276      	negs	r6, r6
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	230a      	movs	r3, #10
 8004a72:	485e      	ldr	r0, [pc, #376]	; (8004bec <_printf_i+0x244>)
 8004a74:	e019      	b.n	8004aaa <_printf_i+0x102>
 8004a76:	680e      	ldr	r6, [r1, #0]
 8004a78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	bf18      	it	ne
 8004a80:	b236      	sxthne	r6, r6
 8004a82:	e7ef      	b.n	8004a64 <_printf_i+0xbc>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6820      	ldr	r0, [r4, #0]
 8004a88:	1d19      	adds	r1, r3, #4
 8004a8a:	6029      	str	r1, [r5, #0]
 8004a8c:	0601      	lsls	r1, r0, #24
 8004a8e:	d501      	bpl.n	8004a94 <_printf_i+0xec>
 8004a90:	681e      	ldr	r6, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <_printf_i+0xf2>
 8004a94:	0646      	lsls	r6, r0, #25
 8004a96:	d5fb      	bpl.n	8004a90 <_printf_i+0xe8>
 8004a98:	881e      	ldrh	r6, [r3, #0]
 8004a9a:	2f6f      	cmp	r7, #111	; 0x6f
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2308      	moveq	r3, #8
 8004aa0:	230a      	movne	r3, #10
 8004aa2:	4852      	ldr	r0, [pc, #328]	; (8004bec <_printf_i+0x244>)
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aaa:	6865      	ldr	r5, [r4, #4]
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	bfa8      	it	ge
 8004ab0:	6821      	ldrge	r1, [r4, #0]
 8004ab2:	60a5      	str	r5, [r4, #8]
 8004ab4:	bfa4      	itt	ge
 8004ab6:	f021 0104 	bicge.w	r1, r1, #4
 8004aba:	6021      	strge	r1, [r4, #0]
 8004abc:	b90e      	cbnz	r6, 8004ac2 <_printf_i+0x11a>
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	d04d      	beq.n	8004b5e <_printf_i+0x1b6>
 8004ac2:	4615      	mov	r5, r2
 8004ac4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ac8:	fb03 6711 	mls	r7, r3, r1, r6
 8004acc:	5dc7      	ldrb	r7, [r0, r7]
 8004ace:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ad2:	4637      	mov	r7, r6
 8004ad4:	42bb      	cmp	r3, r7
 8004ad6:	460e      	mov	r6, r1
 8004ad8:	d9f4      	bls.n	8004ac4 <_printf_i+0x11c>
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d10b      	bne.n	8004af6 <_printf_i+0x14e>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	07de      	lsls	r6, r3, #31
 8004ae2:	d508      	bpl.n	8004af6 <_printf_i+0x14e>
 8004ae4:	6923      	ldr	r3, [r4, #16]
 8004ae6:	6861      	ldr	r1, [r4, #4]
 8004ae8:	4299      	cmp	r1, r3
 8004aea:	bfde      	ittt	le
 8004aec:	2330      	movle	r3, #48	; 0x30
 8004aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004af6:	1b52      	subs	r2, r2, r5
 8004af8:	6122      	str	r2, [r4, #16]
 8004afa:	464b      	mov	r3, r9
 8004afc:	4621      	mov	r1, r4
 8004afe:	4640      	mov	r0, r8
 8004b00:	f8cd a000 	str.w	sl, [sp]
 8004b04:	aa03      	add	r2, sp, #12
 8004b06:	f7ff fedf 	bl	80048c8 <_printf_common>
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d14c      	bne.n	8004ba8 <_printf_i+0x200>
 8004b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b12:	b004      	add	sp, #16
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	4834      	ldr	r0, [pc, #208]	; (8004bec <_printf_i+0x244>)
 8004b1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b1e:	6829      	ldr	r1, [r5, #0]
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b26:	6029      	str	r1, [r5, #0]
 8004b28:	061d      	lsls	r5, r3, #24
 8004b2a:	d514      	bpl.n	8004b56 <_printf_i+0x1ae>
 8004b2c:	07df      	lsls	r7, r3, #31
 8004b2e:	bf44      	itt	mi
 8004b30:	f043 0320 	orrmi.w	r3, r3, #32
 8004b34:	6023      	strmi	r3, [r4, #0]
 8004b36:	b91e      	cbnz	r6, 8004b40 <_printf_i+0x198>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	2310      	movs	r3, #16
 8004b42:	e7af      	b.n	8004aa4 <_printf_i+0xfc>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	f043 0320 	orr.w	r3, r3, #32
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	2378      	movs	r3, #120	; 0x78
 8004b4e:	4828      	ldr	r0, [pc, #160]	; (8004bf0 <_printf_i+0x248>)
 8004b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b54:	e7e3      	b.n	8004b1e <_printf_i+0x176>
 8004b56:	0659      	lsls	r1, r3, #25
 8004b58:	bf48      	it	mi
 8004b5a:	b2b6      	uxthmi	r6, r6
 8004b5c:	e7e6      	b.n	8004b2c <_printf_i+0x184>
 8004b5e:	4615      	mov	r5, r2
 8004b60:	e7bb      	b.n	8004ada <_printf_i+0x132>
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	6826      	ldr	r6, [r4, #0]
 8004b66:	1d18      	adds	r0, r3, #4
 8004b68:	6961      	ldr	r1, [r4, #20]
 8004b6a:	6028      	str	r0, [r5, #0]
 8004b6c:	0635      	lsls	r5, r6, #24
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	d501      	bpl.n	8004b76 <_printf_i+0x1ce>
 8004b72:	6019      	str	r1, [r3, #0]
 8004b74:	e002      	b.n	8004b7c <_printf_i+0x1d4>
 8004b76:	0670      	lsls	r0, r6, #25
 8004b78:	d5fb      	bpl.n	8004b72 <_printf_i+0x1ca>
 8004b7a:	8019      	strh	r1, [r3, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4615      	mov	r5, r2
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	e7ba      	b.n	8004afa <_printf_i+0x152>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	2100      	movs	r1, #0
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	602a      	str	r2, [r5, #0]
 8004b8c:	681d      	ldr	r5, [r3, #0]
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 fb23 	bl	80051dc <memchr>
 8004b96:	b108      	cbz	r0, 8004b9c <_printf_i+0x1f4>
 8004b98:	1b40      	subs	r0, r0, r5
 8004b9a:	6060      	str	r0, [r4, #4]
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba6:	e7a8      	b.n	8004afa <_printf_i+0x152>
 8004ba8:	462a      	mov	r2, r5
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	47d0      	blx	sl
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0ab      	beq.n	8004b0e <_printf_i+0x166>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	079b      	lsls	r3, r3, #30
 8004bba:	d413      	bmi.n	8004be4 <_printf_i+0x23c>
 8004bbc:	68e0      	ldr	r0, [r4, #12]
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	4298      	cmp	r0, r3
 8004bc2:	bfb8      	it	lt
 8004bc4:	4618      	movlt	r0, r3
 8004bc6:	e7a4      	b.n	8004b12 <_printf_i+0x16a>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4649      	mov	r1, r9
 8004bce:	4640      	mov	r0, r8
 8004bd0:	47d0      	blx	sl
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d09b      	beq.n	8004b0e <_printf_i+0x166>
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	68e3      	ldr	r3, [r4, #12]
 8004bda:	9903      	ldr	r1, [sp, #12]
 8004bdc:	1a5b      	subs	r3, r3, r1
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	dcf2      	bgt.n	8004bc8 <_printf_i+0x220>
 8004be2:	e7eb      	b.n	8004bbc <_printf_i+0x214>
 8004be4:	2500      	movs	r5, #0
 8004be6:	f104 0619 	add.w	r6, r4, #25
 8004bea:	e7f5      	b.n	8004bd8 <_printf_i+0x230>
 8004bec:	08005d23 	.word	0x08005d23
 8004bf0:	08005d34 	.word	0x08005d34

08004bf4 <_sbrk_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4d05      	ldr	r5, [pc, #20]	; (8004c10 <_sbrk_r+0x1c>)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc f9d0 	bl	8000fa4 <_sbrk>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_sbrk_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_sbrk_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	20003de8 	.word	0x20003de8

08004c14 <__swbuf_r>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	460e      	mov	r6, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	b118      	cbz	r0, 8004c26 <__swbuf_r+0x12>
 8004c1e:	6983      	ldr	r3, [r0, #24]
 8004c20:	b90b      	cbnz	r3, 8004c26 <__swbuf_r+0x12>
 8004c22:	f000 f9d5 	bl	8004fd0 <__sinit>
 8004c26:	4b21      	ldr	r3, [pc, #132]	; (8004cac <__swbuf_r+0x98>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	d12b      	bne.n	8004c84 <__swbuf_r+0x70>
 8004c2c:	686c      	ldr	r4, [r5, #4]
 8004c2e:	69a3      	ldr	r3, [r4, #24]
 8004c30:	60a3      	str	r3, [r4, #8]
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	071a      	lsls	r2, r3, #28
 8004c36:	d52f      	bpl.n	8004c98 <__swbuf_r+0x84>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	b36b      	cbz	r3, 8004c98 <__swbuf_r+0x84>
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	b2f6      	uxtb	r6, r6
 8004c42:	1ac0      	subs	r0, r0, r3
 8004c44:	6963      	ldr	r3, [r4, #20]
 8004c46:	4637      	mov	r7, r6
 8004c48:	4283      	cmp	r3, r0
 8004c4a:	dc04      	bgt.n	8004c56 <__swbuf_r+0x42>
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f92a 	bl	8004ea8 <_fflush_r>
 8004c54:	bb30      	cbnz	r0, 8004ca4 <__swbuf_r+0x90>
 8004c56:	68a3      	ldr	r3, [r4, #8]
 8004c58:	3001      	adds	r0, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	6022      	str	r2, [r4, #0]
 8004c64:	701e      	strb	r6, [r3, #0]
 8004c66:	6963      	ldr	r3, [r4, #20]
 8004c68:	4283      	cmp	r3, r0
 8004c6a:	d004      	beq.n	8004c76 <__swbuf_r+0x62>
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	07db      	lsls	r3, r3, #31
 8004c70:	d506      	bpl.n	8004c80 <__swbuf_r+0x6c>
 8004c72:	2e0a      	cmp	r6, #10
 8004c74:	d104      	bne.n	8004c80 <__swbuf_r+0x6c>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 f915 	bl	8004ea8 <_fflush_r>
 8004c7e:	b988      	cbnz	r0, 8004ca4 <__swbuf_r+0x90>
 8004c80:	4638      	mov	r0, r7
 8004c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <__swbuf_r+0x9c>)
 8004c86:	429c      	cmp	r4, r3
 8004c88:	d101      	bne.n	8004c8e <__swbuf_r+0x7a>
 8004c8a:	68ac      	ldr	r4, [r5, #8]
 8004c8c:	e7cf      	b.n	8004c2e <__swbuf_r+0x1a>
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <__swbuf_r+0xa0>)
 8004c90:	429c      	cmp	r4, r3
 8004c92:	bf08      	it	eq
 8004c94:	68ec      	ldreq	r4, [r5, #12]
 8004c96:	e7ca      	b.n	8004c2e <__swbuf_r+0x1a>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f80c 	bl	8004cb8 <__swsetup_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0cb      	beq.n	8004c3c <__swbuf_r+0x28>
 8004ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca8:	e7ea      	b.n	8004c80 <__swbuf_r+0x6c>
 8004caa:	bf00      	nop
 8004cac:	08005d68 	.word	0x08005d68
 8004cb0:	08005d88 	.word	0x08005d88
 8004cb4:	08005d48 	.word	0x08005d48

08004cb8 <__swsetup_r>:
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <__swsetup_r+0xcc>)
 8004cba:	b570      	push	{r4, r5, r6, lr}
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	b125      	cbz	r5, 8004cce <__swsetup_r+0x16>
 8004cc4:	69ab      	ldr	r3, [r5, #24]
 8004cc6:	b913      	cbnz	r3, 8004cce <__swsetup_r+0x16>
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 f981 	bl	8004fd0 <__sinit>
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <__swsetup_r+0xd0>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d10f      	bne.n	8004cf4 <__swsetup_r+0x3c>
 8004cd4:	686c      	ldr	r4, [r5, #4]
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cdc:	0719      	lsls	r1, r3, #28
 8004cde:	d42c      	bmi.n	8004d3a <__swsetup_r+0x82>
 8004ce0:	06dd      	lsls	r5, r3, #27
 8004ce2:	d411      	bmi.n	8004d08 <__swsetup_r+0x50>
 8004ce4:	2309      	movs	r3, #9
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e03e      	b.n	8004d72 <__swsetup_r+0xba>
 8004cf4:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <__swsetup_r+0xd4>)
 8004cf6:	429c      	cmp	r4, r3
 8004cf8:	d101      	bne.n	8004cfe <__swsetup_r+0x46>
 8004cfa:	68ac      	ldr	r4, [r5, #8]
 8004cfc:	e7eb      	b.n	8004cd6 <__swsetup_r+0x1e>
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <__swsetup_r+0xd8>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	bf08      	it	eq
 8004d04:	68ec      	ldreq	r4, [r5, #12]
 8004d06:	e7e6      	b.n	8004cd6 <__swsetup_r+0x1e>
 8004d08:	0758      	lsls	r0, r3, #29
 8004d0a:	d512      	bpl.n	8004d32 <__swsetup_r+0x7a>
 8004d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d0e:	b141      	cbz	r1, 8004d22 <__swsetup_r+0x6a>
 8004d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d14:	4299      	cmp	r1, r3
 8004d16:	d002      	beq.n	8004d1e <__swsetup_r+0x66>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff fa45 	bl	80041a8 <_free_r>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6363      	str	r3, [r4, #52]	; 0x34
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f043 0308 	orr.w	r3, r3, #8
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	b94b      	cbnz	r3, 8004d52 <__swsetup_r+0x9a>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d48:	d003      	beq.n	8004d52 <__swsetup_r+0x9a>
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f000 fa05 	bl	800515c <__smakebuf_r>
 8004d52:	89a0      	ldrh	r0, [r4, #12]
 8004d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d58:	f010 0301 	ands.w	r3, r0, #1
 8004d5c:	d00a      	beq.n	8004d74 <__swsetup_r+0xbc>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60a3      	str	r3, [r4, #8]
 8004d62:	6963      	ldr	r3, [r4, #20]
 8004d64:	425b      	negs	r3, r3
 8004d66:	61a3      	str	r3, [r4, #24]
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	b943      	cbnz	r3, 8004d7e <__swsetup_r+0xc6>
 8004d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d70:	d1ba      	bne.n	8004ce8 <__swsetup_r+0x30>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	0781      	lsls	r1, r0, #30
 8004d76:	bf58      	it	pl
 8004d78:	6963      	ldrpl	r3, [r4, #20]
 8004d7a:	60a3      	str	r3, [r4, #8]
 8004d7c:	e7f4      	b.n	8004d68 <__swsetup_r+0xb0>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e7f7      	b.n	8004d72 <__swsetup_r+0xba>
 8004d82:	bf00      	nop
 8004d84:	20000020 	.word	0x20000020
 8004d88:	08005d68 	.word	0x08005d68
 8004d8c:	08005d88 	.word	0x08005d88
 8004d90:	08005d48 	.word	0x08005d48

08004d94 <abort>:
 8004d94:	2006      	movs	r0, #6
 8004d96:	b508      	push	{r3, lr}
 8004d98:	f000 faac 	bl	80052f4 <raise>
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7fc f88e 	bl	8000ebe <_exit>
	...

08004da4 <__sflush_r>:
 8004da4:	898a      	ldrh	r2, [r1, #12]
 8004da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da8:	4605      	mov	r5, r0
 8004daa:	0710      	lsls	r0, r2, #28
 8004dac:	460c      	mov	r4, r1
 8004dae:	d457      	bmi.n	8004e60 <__sflush_r+0xbc>
 8004db0:	684b      	ldr	r3, [r1, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dc04      	bgt.n	8004dc0 <__sflush_r+0x1c>
 8004db6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dc01      	bgt.n	8004dc0 <__sflush_r+0x1c>
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dc2:	2e00      	cmp	r6, #0
 8004dc4:	d0fa      	beq.n	8004dbc <__sflush_r+0x18>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dcc:	682f      	ldr	r7, [r5, #0]
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	d032      	beq.n	8004e38 <__sflush_r+0x94>
 8004dd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	075a      	lsls	r2, r3, #29
 8004dd8:	d505      	bpl.n	8004de6 <__sflush_r+0x42>
 8004dda:	6863      	ldr	r3, [r4, #4]
 8004ddc:	1ac0      	subs	r0, r0, r3
 8004dde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de0:	b10b      	cbz	r3, 8004de6 <__sflush_r+0x42>
 8004de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de4:	1ac0      	subs	r0, r0, r3
 8004de6:	2300      	movs	r3, #0
 8004de8:	4602      	mov	r2, r0
 8004dea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dec:	4628      	mov	r0, r5
 8004dee:	6a21      	ldr	r1, [r4, #32]
 8004df0:	47b0      	blx	r6
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	d106      	bne.n	8004e06 <__sflush_r+0x62>
 8004df8:	6829      	ldr	r1, [r5, #0]
 8004dfa:	291d      	cmp	r1, #29
 8004dfc:	d82c      	bhi.n	8004e58 <__sflush_r+0xb4>
 8004dfe:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <__sflush_r+0x100>)
 8004e00:	40ca      	lsrs	r2, r1
 8004e02:	07d6      	lsls	r6, r2, #31
 8004e04:	d528      	bpl.n	8004e58 <__sflush_r+0xb4>
 8004e06:	2200      	movs	r2, #0
 8004e08:	6062      	str	r2, [r4, #4]
 8004e0a:	6922      	ldr	r2, [r4, #16]
 8004e0c:	04d9      	lsls	r1, r3, #19
 8004e0e:	6022      	str	r2, [r4, #0]
 8004e10:	d504      	bpl.n	8004e1c <__sflush_r+0x78>
 8004e12:	1c42      	adds	r2, r0, #1
 8004e14:	d101      	bne.n	8004e1a <__sflush_r+0x76>
 8004e16:	682b      	ldr	r3, [r5, #0]
 8004e18:	b903      	cbnz	r3, 8004e1c <__sflush_r+0x78>
 8004e1a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e1e:	602f      	str	r7, [r5, #0]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d0cb      	beq.n	8004dbc <__sflush_r+0x18>
 8004e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e28:	4299      	cmp	r1, r3
 8004e2a:	d002      	beq.n	8004e32 <__sflush_r+0x8e>
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f7ff f9bb 	bl	80041a8 <_free_r>
 8004e32:	2000      	movs	r0, #0
 8004e34:	6360      	str	r0, [r4, #52]	; 0x34
 8004e36:	e7c2      	b.n	8004dbe <__sflush_r+0x1a>
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b0      	blx	r6
 8004e40:	1c41      	adds	r1, r0, #1
 8004e42:	d1c7      	bne.n	8004dd4 <__sflush_r+0x30>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0c4      	beq.n	8004dd4 <__sflush_r+0x30>
 8004e4a:	2b1d      	cmp	r3, #29
 8004e4c:	d001      	beq.n	8004e52 <__sflush_r+0xae>
 8004e4e:	2b16      	cmp	r3, #22
 8004e50:	d101      	bne.n	8004e56 <__sflush_r+0xb2>
 8004e52:	602f      	str	r7, [r5, #0]
 8004e54:	e7b2      	b.n	8004dbc <__sflush_r+0x18>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	e7ae      	b.n	8004dbe <__sflush_r+0x1a>
 8004e60:	690f      	ldr	r7, [r1, #16]
 8004e62:	2f00      	cmp	r7, #0
 8004e64:	d0aa      	beq.n	8004dbc <__sflush_r+0x18>
 8004e66:	0793      	lsls	r3, r2, #30
 8004e68:	bf18      	it	ne
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	680e      	ldr	r6, [r1, #0]
 8004e6e:	bf08      	it	eq
 8004e70:	694b      	ldreq	r3, [r1, #20]
 8004e72:	1bf6      	subs	r6, r6, r7
 8004e74:	600f      	str	r7, [r1, #0]
 8004e76:	608b      	str	r3, [r1, #8]
 8004e78:	2e00      	cmp	r6, #0
 8004e7a:	dd9f      	ble.n	8004dbc <__sflush_r+0x18>
 8004e7c:	4633      	mov	r3, r6
 8004e7e:	463a      	mov	r2, r7
 8004e80:	4628      	mov	r0, r5
 8004e82:	6a21      	ldr	r1, [r4, #32]
 8004e84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004e88:	47e0      	blx	ip
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	dc06      	bgt.n	8004e9c <__sflush_r+0xf8>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	e790      	b.n	8004dbe <__sflush_r+0x1a>
 8004e9c:	4407      	add	r7, r0
 8004e9e:	1a36      	subs	r6, r6, r0
 8004ea0:	e7ea      	b.n	8004e78 <__sflush_r+0xd4>
 8004ea2:	bf00      	nop
 8004ea4:	20400001 	.word	0x20400001

08004ea8 <_fflush_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	4605      	mov	r5, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_fflush_r+0x10>
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	b118      	cbz	r0, 8004ec2 <_fflush_r+0x1a>
 8004eba:	6983      	ldr	r3, [r0, #24]
 8004ebc:	b90b      	cbnz	r3, 8004ec2 <_fflush_r+0x1a>
 8004ebe:	f000 f887 	bl	8004fd0 <__sinit>
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <_fflush_r+0x6c>)
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	d11b      	bne.n	8004f00 <_fflush_r+0x58>
 8004ec8:	686c      	ldr	r4, [r5, #4]
 8004eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ef      	beq.n	8004eb2 <_fflush_r+0xa>
 8004ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ed4:	07d0      	lsls	r0, r2, #31
 8004ed6:	d404      	bmi.n	8004ee2 <_fflush_r+0x3a>
 8004ed8:	0599      	lsls	r1, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_fflush_r+0x3a>
 8004edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ede:	f000 f915 	bl	800510c <__retarget_lock_acquire_recursive>
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	f7ff ff5d 	bl	8004da4 <__sflush_r>
 8004eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eec:	4605      	mov	r5, r0
 8004eee:	07da      	lsls	r2, r3, #31
 8004ef0:	d4e0      	bmi.n	8004eb4 <_fflush_r+0xc>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	059b      	lsls	r3, r3, #22
 8004ef6:	d4dd      	bmi.n	8004eb4 <_fflush_r+0xc>
 8004ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efa:	f000 f908 	bl	800510e <__retarget_lock_release_recursive>
 8004efe:	e7d9      	b.n	8004eb4 <_fflush_r+0xc>
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <_fflush_r+0x70>)
 8004f02:	429c      	cmp	r4, r3
 8004f04:	d101      	bne.n	8004f0a <_fflush_r+0x62>
 8004f06:	68ac      	ldr	r4, [r5, #8]
 8004f08:	e7df      	b.n	8004eca <_fflush_r+0x22>
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <_fflush_r+0x74>)
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	bf08      	it	eq
 8004f10:	68ec      	ldreq	r4, [r5, #12]
 8004f12:	e7da      	b.n	8004eca <_fflush_r+0x22>
 8004f14:	08005d68 	.word	0x08005d68
 8004f18:	08005d88 	.word	0x08005d88
 8004f1c:	08005d48 	.word	0x08005d48

08004f20 <std>:
 8004f20:	2300      	movs	r3, #0
 8004f22:	b510      	push	{r4, lr}
 8004f24:	4604      	mov	r4, r0
 8004f26:	e9c0 3300 	strd	r3, r3, [r0]
 8004f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f2e:	6083      	str	r3, [r0, #8]
 8004f30:	8181      	strh	r1, [r0, #12]
 8004f32:	6643      	str	r3, [r0, #100]	; 0x64
 8004f34:	81c2      	strh	r2, [r0, #14]
 8004f36:	6183      	str	r3, [r0, #24]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	305c      	adds	r0, #92	; 0x5c
 8004f3e:	f7ff f895 	bl	800406c <memset>
 8004f42:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <std+0x38>)
 8004f44:	6224      	str	r4, [r4, #32]
 8004f46:	6263      	str	r3, [r4, #36]	; 0x24
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <std+0x3c>)
 8004f4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <std+0x40>)
 8004f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <std+0x44>)
 8004f52:	6323      	str	r3, [r4, #48]	; 0x30
 8004f54:	bd10      	pop	{r4, pc}
 8004f56:	bf00      	nop
 8004f58:	0800532d 	.word	0x0800532d
 8004f5c:	0800534f 	.word	0x0800534f
 8004f60:	08005387 	.word	0x08005387
 8004f64:	080053ab 	.word	0x080053ab

08004f68 <_cleanup_r>:
 8004f68:	4901      	ldr	r1, [pc, #4]	; (8004f70 <_cleanup_r+0x8>)
 8004f6a:	f000 b8af 	b.w	80050cc <_fwalk_reent>
 8004f6e:	bf00      	nop
 8004f70:	08004ea9 	.word	0x08004ea9

08004f74 <__sfmoreglue>:
 8004f74:	2268      	movs	r2, #104	; 0x68
 8004f76:	b570      	push	{r4, r5, r6, lr}
 8004f78:	1e4d      	subs	r5, r1, #1
 8004f7a:	4355      	muls	r5, r2
 8004f7c:	460e      	mov	r6, r1
 8004f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f82:	f7ff f979 	bl	8004278 <_malloc_r>
 8004f86:	4604      	mov	r4, r0
 8004f88:	b140      	cbz	r0, 8004f9c <__sfmoreglue+0x28>
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f90:	300c      	adds	r0, #12
 8004f92:	60a0      	str	r0, [r4, #8]
 8004f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f98:	f7ff f868 	bl	800406c <memset>
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}

08004fa0 <__sfp_lock_acquire>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__sfp_lock_acquire+0x8>)
 8004fa2:	f000 b8b3 	b.w	800510c <__retarget_lock_acquire_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	20003de5 	.word	0x20003de5

08004fac <__sfp_lock_release>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__sfp_lock_release+0x8>)
 8004fae:	f000 b8ae 	b.w	800510e <__retarget_lock_release_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	20003de5 	.word	0x20003de5

08004fb8 <__sinit_lock_acquire>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__sinit_lock_acquire+0x8>)
 8004fba:	f000 b8a7 	b.w	800510c <__retarget_lock_acquire_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	20003de6 	.word	0x20003de6

08004fc4 <__sinit_lock_release>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__sinit_lock_release+0x8>)
 8004fc6:	f000 b8a2 	b.w	800510e <__retarget_lock_release_recursive>
 8004fca:	bf00      	nop
 8004fcc:	20003de6 	.word	0x20003de6

08004fd0 <__sinit>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	f7ff fff0 	bl	8004fb8 <__sinit_lock_acquire>
 8004fd8:	69a3      	ldr	r3, [r4, #24]
 8004fda:	b11b      	cbz	r3, 8004fe4 <__sinit+0x14>
 8004fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe0:	f7ff bff0 	b.w	8004fc4 <__sinit_lock_release>
 8004fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <__sinit+0x68>)
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <__sinit+0x6c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	bf08      	it	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	bf08      	it	eq
 8004ffc:	61a3      	streq	r3, [r4, #24]
 8004ffe:	f000 f81f 	bl	8005040 <__sfp>
 8005002:	6060      	str	r0, [r4, #4]
 8005004:	4620      	mov	r0, r4
 8005006:	f000 f81b 	bl	8005040 <__sfp>
 800500a:	60a0      	str	r0, [r4, #8]
 800500c:	4620      	mov	r0, r4
 800500e:	f000 f817 	bl	8005040 <__sfp>
 8005012:	2200      	movs	r2, #0
 8005014:	2104      	movs	r1, #4
 8005016:	60e0      	str	r0, [r4, #12]
 8005018:	6860      	ldr	r0, [r4, #4]
 800501a:	f7ff ff81 	bl	8004f20 <std>
 800501e:	2201      	movs	r2, #1
 8005020:	2109      	movs	r1, #9
 8005022:	68a0      	ldr	r0, [r4, #8]
 8005024:	f7ff ff7c 	bl	8004f20 <std>
 8005028:	2202      	movs	r2, #2
 800502a:	2112      	movs	r1, #18
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	f7ff ff77 	bl	8004f20 <std>
 8005032:	2301      	movs	r3, #1
 8005034:	61a3      	str	r3, [r4, #24]
 8005036:	e7d1      	b.n	8004fdc <__sinit+0xc>
 8005038:	08005c60 	.word	0x08005c60
 800503c:	08004f69 	.word	0x08004f69

08005040 <__sfp>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	4607      	mov	r7, r0
 8005044:	f7ff ffac 	bl	8004fa0 <__sfp_lock_acquire>
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <__sfp+0x84>)
 800504a:	681e      	ldr	r6, [r3, #0]
 800504c:	69b3      	ldr	r3, [r6, #24]
 800504e:	b913      	cbnz	r3, 8005056 <__sfp+0x16>
 8005050:	4630      	mov	r0, r6
 8005052:	f7ff ffbd 	bl	8004fd0 <__sinit>
 8005056:	3648      	adds	r6, #72	; 0x48
 8005058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	d503      	bpl.n	8005068 <__sfp+0x28>
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	b30b      	cbz	r3, 80050a8 <__sfp+0x68>
 8005064:	6836      	ldr	r6, [r6, #0]
 8005066:	e7f7      	b.n	8005058 <__sfp+0x18>
 8005068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800506c:	b9d5      	cbnz	r5, 80050a4 <__sfp+0x64>
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <__sfp+0x88>)
 8005070:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005074:	60e3      	str	r3, [r4, #12]
 8005076:	6665      	str	r5, [r4, #100]	; 0x64
 8005078:	f000 f847 	bl	800510a <__retarget_lock_init_recursive>
 800507c:	f7ff ff96 	bl	8004fac <__sfp_lock_release>
 8005080:	2208      	movs	r2, #8
 8005082:	4629      	mov	r1, r5
 8005084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800508c:	6025      	str	r5, [r4, #0]
 800508e:	61a5      	str	r5, [r4, #24]
 8005090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005094:	f7fe ffea 	bl	800406c <memset>
 8005098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800509c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050a0:	4620      	mov	r0, r4
 80050a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a4:	3468      	adds	r4, #104	; 0x68
 80050a6:	e7d9      	b.n	800505c <__sfp+0x1c>
 80050a8:	2104      	movs	r1, #4
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7ff ff62 	bl	8004f74 <__sfmoreglue>
 80050b0:	4604      	mov	r4, r0
 80050b2:	6030      	str	r0, [r6, #0]
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d1d5      	bne.n	8005064 <__sfp+0x24>
 80050b8:	f7ff ff78 	bl	8004fac <__sfp_lock_release>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	e7ee      	b.n	80050a0 <__sfp+0x60>
 80050c2:	bf00      	nop
 80050c4:	08005c60 	.word	0x08005c60
 80050c8:	ffff0001 	.word	0xffff0001

080050cc <_fwalk_reent>:
 80050cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d0:	4606      	mov	r6, r0
 80050d2:	4688      	mov	r8, r1
 80050d4:	2700      	movs	r7, #0
 80050d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050de:	f1b9 0901 	subs.w	r9, r9, #1
 80050e2:	d505      	bpl.n	80050f0 <_fwalk_reent+0x24>
 80050e4:	6824      	ldr	r4, [r4, #0]
 80050e6:	2c00      	cmp	r4, #0
 80050e8:	d1f7      	bne.n	80050da <_fwalk_reent+0xe>
 80050ea:	4638      	mov	r0, r7
 80050ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f0:	89ab      	ldrh	r3, [r5, #12]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d907      	bls.n	8005106 <_fwalk_reent+0x3a>
 80050f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050fa:	3301      	adds	r3, #1
 80050fc:	d003      	beq.n	8005106 <_fwalk_reent+0x3a>
 80050fe:	4629      	mov	r1, r5
 8005100:	4630      	mov	r0, r6
 8005102:	47c0      	blx	r8
 8005104:	4307      	orrs	r7, r0
 8005106:	3568      	adds	r5, #104	; 0x68
 8005108:	e7e9      	b.n	80050de <_fwalk_reent+0x12>

0800510a <__retarget_lock_init_recursive>:
 800510a:	4770      	bx	lr

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <__swhatbuf_r>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	460e      	mov	r6, r1
 8005114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005118:	4614      	mov	r4, r2
 800511a:	2900      	cmp	r1, #0
 800511c:	461d      	mov	r5, r3
 800511e:	b096      	sub	sp, #88	; 0x58
 8005120:	da08      	bge.n	8005134 <__swhatbuf_r+0x24>
 8005122:	2200      	movs	r2, #0
 8005124:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005128:	602a      	str	r2, [r5, #0]
 800512a:	061a      	lsls	r2, r3, #24
 800512c:	d410      	bmi.n	8005150 <__swhatbuf_r+0x40>
 800512e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005132:	e00e      	b.n	8005152 <__swhatbuf_r+0x42>
 8005134:	466a      	mov	r2, sp
 8005136:	f000 f95f 	bl	80053f8 <_fstat_r>
 800513a:	2800      	cmp	r0, #0
 800513c:	dbf1      	blt.n	8005122 <__swhatbuf_r+0x12>
 800513e:	9a01      	ldr	r2, [sp, #4]
 8005140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005148:	425a      	negs	r2, r3
 800514a:	415a      	adcs	r2, r3
 800514c:	602a      	str	r2, [r5, #0]
 800514e:	e7ee      	b.n	800512e <__swhatbuf_r+0x1e>
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	2000      	movs	r0, #0
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	b016      	add	sp, #88	; 0x58
 8005158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800515c <__smakebuf_r>:
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005160:	079d      	lsls	r5, r3, #30
 8005162:	4606      	mov	r6, r0
 8005164:	460c      	mov	r4, r1
 8005166:	d507      	bpl.n	8005178 <__smakebuf_r+0x1c>
 8005168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	2301      	movs	r3, #1
 8005172:	6163      	str	r3, [r4, #20]
 8005174:	b002      	add	sp, #8
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	466a      	mov	r2, sp
 800517a:	ab01      	add	r3, sp, #4
 800517c:	f7ff ffc8 	bl	8005110 <__swhatbuf_r>
 8005180:	9900      	ldr	r1, [sp, #0]
 8005182:	4605      	mov	r5, r0
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff f877 	bl	8004278 <_malloc_r>
 800518a:	b948      	cbnz	r0, 80051a0 <__smakebuf_r+0x44>
 800518c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005190:	059a      	lsls	r2, r3, #22
 8005192:	d4ef      	bmi.n	8005174 <__smakebuf_r+0x18>
 8005194:	f023 0303 	bic.w	r3, r3, #3
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	e7e3      	b.n	8005168 <__smakebuf_r+0xc>
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <__smakebuf_r+0x7c>)
 80051a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	6020      	str	r0, [r4, #0]
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	9b00      	ldr	r3, [sp, #0]
 80051b0:	6120      	str	r0, [r4, #16]
 80051b2:	6163      	str	r3, [r4, #20]
 80051b4:	9b01      	ldr	r3, [sp, #4]
 80051b6:	b15b      	cbz	r3, 80051d0 <__smakebuf_r+0x74>
 80051b8:	4630      	mov	r0, r6
 80051ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051be:	f000 f92d 	bl	800541c <_isatty_r>
 80051c2:	b128      	cbz	r0, 80051d0 <__smakebuf_r+0x74>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	89a0      	ldrh	r0, [r4, #12]
 80051d2:	4305      	orrs	r5, r0
 80051d4:	81a5      	strh	r5, [r4, #12]
 80051d6:	e7cd      	b.n	8005174 <__smakebuf_r+0x18>
 80051d8:	08004f69 	.word	0x08004f69

080051dc <memchr>:
 80051dc:	4603      	mov	r3, r0
 80051de:	b510      	push	{r4, lr}
 80051e0:	b2c9      	uxtb	r1, r1
 80051e2:	4402      	add	r2, r0
 80051e4:	4293      	cmp	r3, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	d101      	bne.n	80051ee <memchr+0x12>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e003      	b.n	80051f6 <memchr+0x1a>
 80051ee:	7804      	ldrb	r4, [r0, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	428c      	cmp	r4, r1
 80051f4:	d1f6      	bne.n	80051e4 <memchr+0x8>
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <memmove>:
 80051f8:	4288      	cmp	r0, r1
 80051fa:	b510      	push	{r4, lr}
 80051fc:	eb01 0402 	add.w	r4, r1, r2
 8005200:	d902      	bls.n	8005208 <memmove+0x10>
 8005202:	4284      	cmp	r4, r0
 8005204:	4623      	mov	r3, r4
 8005206:	d807      	bhi.n	8005218 <memmove+0x20>
 8005208:	1e43      	subs	r3, r0, #1
 800520a:	42a1      	cmp	r1, r4
 800520c:	d008      	beq.n	8005220 <memmove+0x28>
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005216:	e7f8      	b.n	800520a <memmove+0x12>
 8005218:	4601      	mov	r1, r0
 800521a:	4402      	add	r2, r0
 800521c:	428a      	cmp	r2, r1
 800521e:	d100      	bne.n	8005222 <memmove+0x2a>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522a:	e7f7      	b.n	800521c <memmove+0x24>

0800522c <__malloc_lock>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__malloc_lock+0x8>)
 800522e:	f7ff bf6d 	b.w	800510c <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	20003de4 	.word	0x20003de4

08005238 <__malloc_unlock>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__malloc_unlock+0x8>)
 800523a:	f7ff bf68 	b.w	800510e <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	20003de4 	.word	0x20003de4

08005244 <_realloc_r>:
 8005244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005248:	4680      	mov	r8, r0
 800524a:	4614      	mov	r4, r2
 800524c:	460e      	mov	r6, r1
 800524e:	b921      	cbnz	r1, 800525a <_realloc_r+0x16>
 8005250:	4611      	mov	r1, r2
 8005252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	f7ff b80f 	b.w	8004278 <_malloc_r>
 800525a:	b92a      	cbnz	r2, 8005268 <_realloc_r+0x24>
 800525c:	f7fe ffa4 	bl	80041a8 <_free_r>
 8005260:	4625      	mov	r5, r4
 8005262:	4628      	mov	r0, r5
 8005264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005268:	f000 f8fa 	bl	8005460 <_malloc_usable_size_r>
 800526c:	4284      	cmp	r4, r0
 800526e:	4607      	mov	r7, r0
 8005270:	d802      	bhi.n	8005278 <_realloc_r+0x34>
 8005272:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005276:	d812      	bhi.n	800529e <_realloc_r+0x5a>
 8005278:	4621      	mov	r1, r4
 800527a:	4640      	mov	r0, r8
 800527c:	f7fe fffc 	bl	8004278 <_malloc_r>
 8005280:	4605      	mov	r5, r0
 8005282:	2800      	cmp	r0, #0
 8005284:	d0ed      	beq.n	8005262 <_realloc_r+0x1e>
 8005286:	42bc      	cmp	r4, r7
 8005288:	4622      	mov	r2, r4
 800528a:	4631      	mov	r1, r6
 800528c:	bf28      	it	cs
 800528e:	463a      	movcs	r2, r7
 8005290:	f7fe fede 	bl	8004050 <memcpy>
 8005294:	4631      	mov	r1, r6
 8005296:	4640      	mov	r0, r8
 8005298:	f7fe ff86 	bl	80041a8 <_free_r>
 800529c:	e7e1      	b.n	8005262 <_realloc_r+0x1e>
 800529e:	4635      	mov	r5, r6
 80052a0:	e7df      	b.n	8005262 <_realloc_r+0x1e>

080052a2 <_raise_r>:
 80052a2:	291f      	cmp	r1, #31
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4604      	mov	r4, r0
 80052a8:	460d      	mov	r5, r1
 80052aa:	d904      	bls.n	80052b6 <_raise_r+0x14>
 80052ac:	2316      	movs	r3, #22
 80052ae:	6003      	str	r3, [r0, #0]
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
 80052b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052b8:	b112      	cbz	r2, 80052c0 <_raise_r+0x1e>
 80052ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052be:	b94b      	cbnz	r3, 80052d4 <_raise_r+0x32>
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 f831 	bl	8005328 <_getpid_r>
 80052c6:	462a      	mov	r2, r5
 80052c8:	4601      	mov	r1, r0
 80052ca:	4620      	mov	r0, r4
 80052cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d0:	f000 b818 	b.w	8005304 <_kill_r>
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d00a      	beq.n	80052ee <_raise_r+0x4c>
 80052d8:	1c59      	adds	r1, r3, #1
 80052da:	d103      	bne.n	80052e4 <_raise_r+0x42>
 80052dc:	2316      	movs	r3, #22
 80052de:	6003      	str	r3, [r0, #0]
 80052e0:	2001      	movs	r0, #1
 80052e2:	e7e7      	b.n	80052b4 <_raise_r+0x12>
 80052e4:	2400      	movs	r4, #0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052ec:	4798      	blx	r3
 80052ee:	2000      	movs	r0, #0
 80052f0:	e7e0      	b.n	80052b4 <_raise_r+0x12>
	...

080052f4 <raise>:
 80052f4:	4b02      	ldr	r3, [pc, #8]	; (8005300 <raise+0xc>)
 80052f6:	4601      	mov	r1, r0
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f7ff bfd2 	b.w	80052a2 <_raise_r>
 80052fe:	bf00      	nop
 8005300:	20000020 	.word	0x20000020

08005304 <_kill_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	2300      	movs	r3, #0
 8005308:	4d06      	ldr	r5, [pc, #24]	; (8005324 <_kill_r+0x20>)
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	f7fb fdc4 	bl	8000e9e <_kill>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	d102      	bne.n	8005320 <_kill_r+0x1c>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	b103      	cbz	r3, 8005320 <_kill_r+0x1c>
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	bd38      	pop	{r3, r4, r5, pc}
 8005322:	bf00      	nop
 8005324:	20003de8 	.word	0x20003de8

08005328 <_getpid_r>:
 8005328:	f7fb bdb2 	b.w	8000e90 <_getpid>

0800532c <__sread>:
 800532c:	b510      	push	{r4, lr}
 800532e:	460c      	mov	r4, r1
 8005330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005334:	f000 f89c 	bl	8005470 <_read_r>
 8005338:	2800      	cmp	r0, #0
 800533a:	bfab      	itete	ge
 800533c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800533e:	89a3      	ldrhlt	r3, [r4, #12]
 8005340:	181b      	addge	r3, r3, r0
 8005342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005346:	bfac      	ite	ge
 8005348:	6563      	strge	r3, [r4, #84]	; 0x54
 800534a:	81a3      	strhlt	r3, [r4, #12]
 800534c:	bd10      	pop	{r4, pc}

0800534e <__swrite>:
 800534e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005352:	461f      	mov	r7, r3
 8005354:	898b      	ldrh	r3, [r1, #12]
 8005356:	4605      	mov	r5, r0
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	460c      	mov	r4, r1
 800535c:	4616      	mov	r6, r2
 800535e:	d505      	bpl.n	800536c <__swrite+0x1e>
 8005360:	2302      	movs	r3, #2
 8005362:	2200      	movs	r2, #0
 8005364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005368:	f000 f868 	bl	800543c <_lseek_r>
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	4632      	mov	r2, r6
 8005370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	4628      	mov	r0, r5
 8005378:	463b      	mov	r3, r7
 800537a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005382:	f000 b817 	b.w	80053b4 <_write_r>

08005386 <__sseek>:
 8005386:	b510      	push	{r4, lr}
 8005388:	460c      	mov	r4, r1
 800538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538e:	f000 f855 	bl	800543c <_lseek_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	bf15      	itete	ne
 8005398:	6560      	strne	r0, [r4, #84]	; 0x54
 800539a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800539e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053a2:	81a3      	strheq	r3, [r4, #12]
 80053a4:	bf18      	it	ne
 80053a6:	81a3      	strhne	r3, [r4, #12]
 80053a8:	bd10      	pop	{r4, pc}

080053aa <__sclose>:
 80053aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ae:	f000 b813 	b.w	80053d8 <_close_r>
	...

080053b4 <_write_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	4611      	mov	r1, r2
 80053bc:	2200      	movs	r2, #0
 80053be:	4d05      	ldr	r5, [pc, #20]	; (80053d4 <_write_r+0x20>)
 80053c0:	602a      	str	r2, [r5, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f7fb fda2 	bl	8000f0c <_write>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_write_r+0x1e>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_write_r+0x1e>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20003de8 	.word	0x20003de8

080053d8 <_close_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	2300      	movs	r3, #0
 80053dc:	4d05      	ldr	r5, [pc, #20]	; (80053f4 <_close_r+0x1c>)
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	f7fb fdae 	bl	8000f44 <_close>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_close_r+0x1a>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_close_r+0x1a>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	20003de8 	.word	0x20003de8

080053f8 <_fstat_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	2300      	movs	r3, #0
 80053fc:	4d06      	ldr	r5, [pc, #24]	; (8005418 <_fstat_r+0x20>)
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	f7fb fda8 	bl	8000f5a <_fstat>
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	d102      	bne.n	8005414 <_fstat_r+0x1c>
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	b103      	cbz	r3, 8005414 <_fstat_r+0x1c>
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	bf00      	nop
 8005418:	20003de8 	.word	0x20003de8

0800541c <_isatty_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	2300      	movs	r3, #0
 8005420:	4d05      	ldr	r5, [pc, #20]	; (8005438 <_isatty_r+0x1c>)
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	f7fb fda6 	bl	8000f78 <_isatty>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_isatty_r+0x1a>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_isatty_r+0x1a>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	20003de8 	.word	0x20003de8

0800543c <_lseek_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	2200      	movs	r2, #0
 8005446:	4d05      	ldr	r5, [pc, #20]	; (800545c <_lseek_r+0x20>)
 8005448:	602a      	str	r2, [r5, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f7fb fd9e 	bl	8000f8c <_lseek>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_lseek_r+0x1e>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_lseek_r+0x1e>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	20003de8 	.word	0x20003de8

08005460 <_malloc_usable_size_r>:
 8005460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005464:	1f18      	subs	r0, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	bfbc      	itt	lt
 800546a:	580b      	ldrlt	r3, [r1, r0]
 800546c:	18c0      	addlt	r0, r0, r3
 800546e:	4770      	bx	lr

08005470 <_read_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	2200      	movs	r2, #0
 800547a:	4d05      	ldr	r5, [pc, #20]	; (8005490 <_read_r+0x20>)
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fb fd27 	bl	8000ed2 <_read>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_read_r+0x1e>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_read_r+0x1e>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20003de8 	.word	0x20003de8

08005494 <_init>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr

080054a0 <_fini>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr
